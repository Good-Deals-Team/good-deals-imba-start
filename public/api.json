{
  "events": [],
  "entries": [
    {
      "name": "Event",
      "kind": "eventinterface",
      "extends": null,
      "meta": {},
      "members": [
        {
          "name": "bubbles",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true or false depending on how event was initialized. True if event goes through its target&#39;s ancestors in reverse tree order, and false otherwise.</p>\n"
          ]
        },
        {
          "name": "cancelBubble",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "cancelable",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.</p>\n"
          ]
        },
        {
          "name": "composed",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.</p>\n"
          ]
        },
        {
          "name": "currentTarget",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the object whose event listener&#39;s callback is currently being invoked.</p>\n"
          ]
        },
        {
          "name": "defaultPrevented",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.</p>\n"
          ]
        },
        {
          "name": "eventPhase",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the event&#39;s phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.</p>\n"
          ]
        },
        {
          "name": "isTrusted",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if event was dispatched by the user agent, and false otherwise.</p>\n"
          ]
        },
        {
          "name": "returnValue",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "srcElement",
          "meta": {},
          "kind": "property",
          "tags": {
            "deprecated": true
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "target",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the object to which event is dispatched (its target).</p>\n"
          ]
        },
        {
          "name": "timeStamp",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the event&#39;s timestamp as the number of milliseconds measured relative to the time origin.</p>\n"
          ]
        },
        {
          "name": "type",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the type of event, e.g. &quot;click&quot;, &quot;hashchange&quot;, or &quot;submit&quot;.</p>\n"
          ]
        },
        {
          "name": "composedPath",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            "<p>Returns the invocation target objects of event&#39;s path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root&#39;s mode is &quot;closed&quot; that are not reachable from event&#39;s currentTarget.</p>\n"
          ]
        },
        {
          "name": "initEvent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "preventDefault",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            "<p>If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.</p>\n"
          ]
        },
        {
          "name": "stopImmediatePropagation",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            "<p>Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.</p>\n"
          ]
        },
        {
          "name": "stopPropagation",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            "<p>When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.</p>\n"
          ]
        },
        {
          "name": "AT_TARGET",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "BUBBLING_PHASE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "CAPTURING_PHASE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "NONE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "@prevent",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https"
          },
          "docs": [
            "<p>Tells the browser that the default action should not be taken. The event will still continue to propagate up the tree. See Event.preventDefault()</p>\n"
          ]
        },
        {
          "name": "@stop",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Stops the event from propagating up the tree. Event listeners for the same event on nodes further up the tree will not be triggered. See Event.stopPropagation()</p>\n"
          ]
        },
        {
          "name": "@once",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Indicates that the listeners should be invoked at most once. The listener will automatically be removed when invoked.</p>\n"
          ]
        },
        {
          "name": "@capture",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Indicating that events of this type should be dispatched to the registered listener before being dispatched to tags deeper in the DOM tree.</p>\n"
          ]
        },
        {
          "name": "@passive",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "indicates that the listener will never call preventDefault()"
          },
          "docs": [
            "<p>Indicates that the listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. This is useful for optimal performance while scrolling etc.</p>\n"
          ]
        },
        {
          "name": "@silent",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Don't trigger imba.commit from this event handler"
          },
          "docs": [
            "<p>By default, Imba will re-render all scheduled tags after any <em>handled</em> event. So, Imba won&#39;t re-render your application if you click an element that has no attached handlers, but if you&#39;ve added a <api-link class=\"cfy-ah\">@click</api-link> listener somewhere in the chain of elements, <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">imba.commit</app-code-inline> will automatically be called after the event has been handled. </p>\n<p>This is usually what you want, but it is useful to be able to override this, especially when dealing with <api-link class=\"cfy-ah\">@scroll</api-link> and other events that might fire rapidly.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"1.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @click.silent=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>"
          ]
        },
        {
          "name": "@wait",
          "meta": {
            "Tester <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">hello</app-code-inline>": true
          },
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)"
          },
          "docs": [
            "<p>The wait modifier delays the execution of subsequent modifiers and callback. It defaults to wait for 250ms, which can be overridden by passing a number or time as the first/only argument. {@link Î±throttle}</p>\n<h1>Tester <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">hello</app-code-inline></h1>"
          ]
        },
        {
          "name": "@throttle",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)"
          },
          "docs": [
            "<p>Hello there</p>\n"
          ]
        },
        {
          "name": "@debounce",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)"
          },
          "docs": [
            "<p>Hello there</p>\n"
          ]
        },
        {
          "name": "@trusted",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https"
          },
          "docs": [
            "<p>Stops handling unless event is trusted</p>\n"
          ]
        },
        {
          "name": "@self",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only trigger handler if event.target is the element itself</p>\n"
          ]
        },
        {
          "name": "@sel",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(selector)"
          },
          "docs": [
            "<p>Only trigger handler if event.target matches selector</p>\n"
          ]
        },
        {
          "name": "@if",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(condition)"
          },
          "docs": [
            "<p>Only trigger condition is truthy</p>\n"
          ]
        },
        {
          "name": "@emit",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "detail",
              "kind": "parameterName"
            },
            "detail": "(name,detail = {})"
          },
          "docs": [
            "<p>Trigger another event via this handler {@link MyClass}</p>\n"
          ]
        },
        {
          "name": "@emit-name",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "detail",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Trigger another event via this handler</p>\n"
          ]
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
          ]
        },
        {
          "name": "@flag-name",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
          ]
        },
        {
          "name": "@log",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(...data)"
          },
          "docs": [
            "<p>Logs to console</p>\n"
          ]
        },
        {
          "name": "detail",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "originalEvent",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        }
      ],
      "docs": [
        "<p>An event which takes place in the DOM.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "UIEvent",
      "kind": "eventinterface",
      "extends": "Event",
      "meta": {},
      "members": [
        {
          "name": "detail",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "view",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "which",
          "meta": {},
          "kind": "property",
          "tags": {
            "deprecated": true
          },
          "docs": [
            ""
          ]
        }
      ],
      "docs": [
        "<p>Simple user interface events.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "MouseEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {},
      "members": [
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "button",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "buttons",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "clientX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "clientY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "movementX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "movementY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "offsetX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "offsetY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "pageX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "pageY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "relatedTarget",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "screenX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "screenY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "x",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "y",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "getModifierState",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "initMouseEvent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "@ctrl",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if ctrl key is pressed</p>\n"
          ]
        },
        {
          "name": "@alt",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if alt key is pressed</p>\n"
          ]
        },
        {
          "name": "@shift",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if shift key is pressed</p>\n"
          ]
        },
        {
          "name": "@meta",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if meta key is pressed</p>\n"
          ]
        },
        {
          "name": "@middle",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if middle button is pressed</p>\n"
          ]
        },
        {
          "name": "@left",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if left/primary button is pressed</p>\n"
          ]
        },
        {
          "name": "@right",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if right button is pressed</p>\n"
          ]
        }
      ],
      "docs": [
        "<p>Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "PointerEvent",
      "kind": "eventinterface",
      "extends": "MouseEvent",
      "meta": {},
      "members": [
        {
          "name": "height",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "isPrimary",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "pointerId",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "pointerType",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "pressure",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "tangentialPressure",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "tiltX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "tiltY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "twist",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "width",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "getCoalescedEvents",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "getPredictedEvents",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "@mouse",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a mouse device."
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "@pen",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a pen or stylus device."
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "@touch",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a touch, such as a finger."
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "@pressure",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only when pressure is at least amount (defaults to 0.5)</p>\n"
          ]
        }
      ],
      "docs": [
        "<p>The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "DragEvent",
      "kind": "eventinterface",
      "extends": "MouseEvent",
      "meta": {},
      "members": [
        {
          "name": "dataTransfer",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns the DataTransfer object for the event.</p>\n"
          ]
        }
      ],
      "docs": [
        "<p>A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "KeyboardEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {},
      "members": [
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "char",
          "meta": {},
          "kind": "property",
          "tags": {
            "deprecated": true
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "charCode",
          "meta": {},
          "kind": "property",
          "tags": {
            "deprecated": true
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "code",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "isComposing",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "key",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "keyCode",
          "meta": {},
          "kind": "property",
          "tags": {
            "deprecated": true
          },
          "docs": [
            ""
          ]
        },
        {
          "name": "location",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "repeat",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "getModifierState",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "DOM_KEY_LOCATION_LEFT",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "DOM_KEY_LOCATION_NUMPAD",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "DOM_KEY_LOCATION_RIGHT",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "DOM_KEY_LOCATION_STANDARD",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "@enter",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if enter key is pressed</p>\n"
          ]
        },
        {
          "name": "@left",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if left key is pressed</p>\n"
          ]
        },
        {
          "name": "@right",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if right key is pressed</p>\n"
          ]
        },
        {
          "name": "@up",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if up key is pressed</p>\n"
          ]
        },
        {
          "name": "@down",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if down key is pressed</p>\n"
          ]
        },
        {
          "name": "@tab",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if tab key is pressed</p>\n"
          ]
        },
        {
          "name": "@esc",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if esc key is pressed</p>\n"
          ]
        },
        {
          "name": "@space",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if space key is pressed</p>\n"
          ]
        },
        {
          "name": "@del",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if del key is pressed</p>\n"
          ]
        },
        {
          "name": "@key",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Only if keyCode == code</p>\n"
          ]
        }
      ],
      "docs": [
        "<p>KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "ImbaIntersectEvent",
      "kind": "eventinterface",
      "extends": "Event",
      "meta": {
        "Syntax": true
      },
      "members": [
        {
          "name": "@in",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>The in modifier tells the intersect event to only trigger whenever the visibility has increased.</p>\n"
          ]
        },
        {
          "name": "@out",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>The out modifier tells the intersection event to only trigger whenever the visibility has decreased.</p>\n"
          ]
        },
        {
          "name": "@css",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>The css modifier sets a css variable --ratio on the event target with the current ratio.</p>\n"
          ]
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "name",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Will add a class to the DOM element whenever it is intersecting</p>\n"
          ]
        },
        {
          "name": "@flag-name",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": [
            "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
          ]
        },
        {
          "name": "@options",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "thresholds",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Will add a class to the DOM element whenever it is intersecting</p>\n"
          ]
        },
        {
          "name": "entry",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>The raw IntersectionObserverEntry</p>\n"
          ]
        },
        {
          "name": "ratio",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Ratio of the intersectionRect to the boundingClientRect</p>\n"
          ]
        },
        {
          "name": "delta",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Difference in ratio since previous event</p>\n"
          ]
        }
      ],
      "docs": [
        "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> is a <a href=\"https://caniuse.com/#feat=intersectionobserver\">well-supported</a> API in modern browsers. It provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&#39;s viewport. Imba adds a simplified abstraction on top of this via the custom <api-link class=\"cfy-ah\">@intersect</api-link> event.</p>\n<p>The <api-link class=\"cfy-ah\">@intersect</api-link> handler accepts several arguments. You can pass in an object with the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root\">root</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\">rootMargin</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold\">threshold</a>  properties supported by <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver\">IntersectionObserver</a>.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"2.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @intersect.in=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>"
      ],
      "tags": {}
    },
    {
      "name": "ImbaResizeEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {
        "Syntax": true
      },
      "members": [
        {
          "name": "width",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "height",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "rect",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "entry",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "test",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        }
      ],
      "docs": [
        "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\">ResizeObserver</a> interface reports changes to the dimensions of an Element&#39;s content or border box. It has <a href=\"https://caniuse.com/#feat=resizeobserver\">good browser support</a> and is very useful in a wide variety of usecases. ResizeObserver avoids infinite callback loops and cyclic dependencies that are often created when resizing via a callback function. It does this by only processing elements deeper in the DOM in subsequent frames.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"3.imba\" data-lang=\"imba\">test</code></app-code-block>"
      ],
      "tags": {}
    },
    {
      "name": "ImbaTouch",
      "kind": "eventinterface",
      "extends": null,
      "meta": {},
      "members": [
        {
          "name": "x",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>The final X coordinate of the pointer (after modifiers)</p>\n"
          ]
        },
        {
          "name": "y",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>The final Y coordinate of the pointer (after modifiers)</p>\n"
          ]
        },
        {
          "name": "target",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            ""
          ]
        },
        {
          "name": "clientX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>The X coordinate of the pointer in local (DOM content) coordinates.</p>\n"
          ]
        },
        {
          "name": "clientY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</p>\n"
          ]
        },
        {
          "name": "active?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>True if touch is still active</p>\n"
          ]
        },
        {
          "name": "ended?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>True if touch has ended</p>\n"
          ]
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">control</app-code-inline> key was down when the mouse event was fired.</p>\n"
          ]
        },
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">alt</app-code-inline> key was down when the mouse event was fired.</p>\n"
          ]
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">shift</app-code-inline> key was down when the mouse event was fired.</p>\n"
          ]
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">shift</app-code-inline> key was down when the mouse event was fired.</p>\n"
          ]
        },
        {
          "name": "pointerType",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": [
            "<p>Indicates the device type that caused the event (mouse, pen, touch, etc.)</p>\n"
          ]
        },
        {
          "name": "pointerId",
          "meta": {},
          "kind": "property",
          "tags": {
            "summary": "A unique identifier for the pointer causing the event."
          },
          "docs": [
            "<p>The identifier is unique, being different from the identifiers of all other active pointer events. Since the value may be randomly generated, it is not guaranteed to convey any particular meaning.</p>\n"
          ]
        },
        {
          "name": "@moved",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(threshold = 4px)",
            "example": "// returns 2\nglobalNS.method1(5, 10);"
          },
          "docs": [
            "<p>Only when touch has moved more than threshold</p>\n"
          ]
        },
        {
          "name": "@moved-x",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(threshold = 4px)"
          },
          "docs": [
            "<p>Only when touch has moved left or right more than threshold</p>\n"
          ]
        },
        {
          "name": "@moved-y",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(threshold = 4px)"
          },
          "docs": [
            "<p>Only when touch has moved up or down more than threshold</p>\n"
          ]
        },
        {
          "name": "@moved-up",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(threshold = 4px)"
          },
          "docs": [
            "<p>Only when touch has moved up more than threshold</p>\n"
          ]
        },
        {
          "name": "@moved-down",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(threshold = 4px)"
          },
          "docs": [
            "<p>Only when touch has moved down more than threshold</p>\n"
          ]
        },
        {
          "name": "@sync",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https",
            "detail": "(data, xProp?, yProp?)"
          },
          "docs": [
            "<p>A convenient touch modifier that takes care of updating the x,y values of some data during touch. When touch starts sync will remember the initial x,y values and only add/subtract based on movement of the touch.</p>\n"
          ]
        },
        {
          "name": "@apply",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https",
            "detail": "(data, xProp?, yProp?)"
          },
          "docs": [
            "<p>Sets the x and y properties of object to the x and y properties of touch.</p>\n"
          ]
        },
        {
          "name": "@fit",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "Convert the coordinates of the touch to some other frame of reference.",
            "detail": "(target?,snap?)"
          },
          "docs": [
            "<p>A very common need for touches is to convert the coordinates of the touch to some other frame of reference. When dragging you might want to make x,y relative to the container. For a custom slider you might want to convert the coordinates from pixels to relative offset of the slider track. There are loads of other scenarios where you&#39;d want to convert the coordinates to some arbitrary scale and offset. This can easily be achieved with fitting modifiers.</p>\n"
          ]
        },
        {
          "name": "@reframe",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(target?, ax?, ay?)"
          },
          "docs": [
            "<p>Just like @touch.fit but without clamping x,y to the bounds of the\ntarget.</p>\n"
          ]
        },
        {
          "name": "@pin",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(target?, ax?, ay?)"
          },
          "docs": [
            "<p>Allow pinning the touch to a certain point in an element, so that\nall future x,y values are relative to this pinned point.</p>\n"
          ]
        },
        {
          "name": "@round",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(to = 1)"
          },
          "docs": [
            "<p>Round the x,y coordinates with an option accuracy</p>\n"
          ]
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
          ]
        },
        {
          "name": "@flag-name",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": [
            "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
          ]
        }
      ],
      "docs": [
        "<p>To make it easier and more fun to work with touches, Imba includes a custom <api-link class=\"cfy-ah\">@touch</api-link> event that combines <api-link class=\"cfy-ah\">@pointerdown</api-link> -&gt; <api-link class=\"cfy-ah\">@pointermove</api-link> -&gt; <api-link class=\"cfy-ah\">@pointerup</api-link> in one convenient handler, with modifiers for commonly needed functionality.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "abort",
      "kind": "event",
      "type": "UIEvent",
      "meta": {},
      "docs": [
        "<p>The loading of a resource has been aborted.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "auxclick",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "cancel",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "canplay",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        "<p>The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "canplaythrough",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        "<p>The user agent can play the media up to its end without having to stop for further buffering of content.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "change",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        "<p>The change event is fired for <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;input&gt;</app-code-inline>, <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;select&gt;</app-code-inline>, and <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;textarea&gt;</app-code-inline> elements when a change to the element&#39;s value is committed by the user.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "click",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        "<p>A pointing device button has been pressed and released on an element.</p>\n"
      ],
      "tags": {}
    },
    {
      "name": "close",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "contextmenu",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "cuechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "dblclick",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "drag",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when an element or text selection is being dragged."
      }
    },
    {
      "name": "dragend",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."
      }
    },
    {
      "name": "dragenter",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when a dragged element or text selection enters a valid drop target."
      }
    },
    {
      "name": "dragleave",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when a dragged element or text selection leaves a valid drop target"
      }
    },
    {
      "name": "dragover",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than mouseover )."
      }
    },
    {
      "name": "dragstart",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when the user starts dragging an element or text selection."
      }
    },
    {
      "name": "drop",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "This event is fired when an element or text selection is dropped on a valid drop target."
      }
    },
    {
      "name": "durationchange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "emptied",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "ended",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "input",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "invalid",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "intersect",
      "kind": "event",
      "type": "ImbaIntersectEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "keydown",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "keypress",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "keyup",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "load",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "loadeddata",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "loadedmetadata",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "loadstart",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mousedown",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mouseenter",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mouseleave",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mousemove",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mouseout",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mouseover",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "mouseup",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "pause",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "play",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "playing",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "pointercancel",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "A browser fires this event if it concludes the pointer will no longer be able to generate events (for example the related device is deactivated)."
      }
    },
    {
      "name": "pointerdown",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer becomes active buttons state."
      }
    },
    {
      "name": "pointerenter",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown)."
      }
    },
    {
      "name": "pointerleave",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer."
      }
    },
    {
      "name": "pointermove",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer changes coordinates. This event is also used if the change in pointer state can not be reported by other events."
      }
    },
    {
      "name": "pointerout",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired for several reasons including: pointer is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer."
      }
    },
    {
      "name": "pointerover",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer is moved into an element's hit test boundaries."
      }
    },
    {
      "name": "pointerup",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when a pointer is no longer active buttons state."
      }
    },
    {
      "name": "gotpointercapture",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired when an element receives pointer capture."
      }
    },
    {
      "name": "lostpointercapture",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {
        "summary": "Fired after pointer capture is released for a pointer."
      }
    },
    {
      "name": "ratechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "reset",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "resize",
      "kind": "event",
      "type": "ImbaResizeEvent",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "scroll",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "seeked",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "seeking",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "select",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "selectionchange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "selectstart",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "stalled",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "submit",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "suspend",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "timeupdate",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "toggle",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "touch",
      "kind": "event",
      "type": "ImbaTouch",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "volumechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    },
    {
      "name": "waiting",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": [
        ""
      ],
      "tags": {}
    }
  ]
}