{
  "events": [],
  "entries": [
    {
      "name": "Event",
      "kind": "eventinterface",
      "extends": null,
      "meta": {},
      "members": [
        {
          "name": "bubbles",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true or false depending on how event was initialized. True if event goes through its target&#39;s ancestors in reverse tree order, and false otherwise.</p>\n"
        },
        {
          "name": "cancelBubble",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "cancelable",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.</p>\n"
        },
        {
          "name": "composed",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.</p>\n"
        },
        {
          "name": "currentTarget",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the object whose event listener&#39;s callback is currently being invoked.</p>\n"
        },
        {
          "name": "defaultPrevented",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.</p>\n"
        },
        {
          "name": "eventPhase",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the event&#39;s phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.</p>\n"
        },
        {
          "name": "isTrusted",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if event was dispatched by the user agent, and false otherwise.</p>\n"
        },
        {
          "name": "returnValue",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "target",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the object to which event is dispatched (its target).</p>\n"
        },
        {
          "name": "timeStamp",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the event&#39;s timestamp as the number of milliseconds measured relative to the time origin.</p>\n"
        },
        {
          "name": "type",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the type of event, e.g. &quot;click&quot;, &quot;hashchange&quot;, or &quot;submit&quot;.</p>\n"
        },
        {
          "name": "composedPath",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns the invocation target objects of event&#39;s path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root&#39;s mode is &quot;closed&quot; that are not reachable from event&#39;s currentTarget.</p>\n"
        },
        {
          "name": "initEvent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "preventDefault",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.</p>\n"
        },
        {
          "name": "stopImmediatePropagation",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.</p>\n"
        },
        {
          "name": "stopPropagation",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.</p>\n"
        },
        {
          "name": "AT_TARGET",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "BUBBLING_PHASE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "CAPTURING_PHASE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "NONE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "@prevent",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https"
          },
          "docs": "<p>Tells the browser that the default action should not be taken. The event will still continue to propagate up the tree. See Event.preventDefault()</p>\n"
        },
        {
          "name": "@stop",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Stops the event from propagating up the tree. Event listeners for the same event on nodes further up the tree will not be triggered. See Event.stopPropagation()</p>\n"
        },
        {
          "name": "@once",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Indicates that the listeners should be invoked at most once. The listener will automatically be removed when invoked.</p>\n"
        },
        {
          "name": "@capture",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Indicating that events of this type should be dispatched to the registered listener before being dispatched to tags deeper in the DOM tree.</p>\n"
        },
        {
          "name": "@passive",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "indicates that the listener will never call preventDefault()"
          },
          "docs": "<p>Indicates that the listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. This is useful for optimal performance while scrolling etc.</p>\n"
        },
        {
          "name": "@silent",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Don't trigger imba.commit from this event handler"
          },
          "docs": "<p>By default, Imba will re-render all scheduled tags after any <em>handled</em> event. So, Imba won&#39;t re-render your application if you click an element that has no attached handlers, but if you&#39;ve added a <api-link class=\"cfy-ah\">@click</api-link> listener somewhere in the chain of elements, <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">imba.commit</app-code-inline> will automatically be called after the event has been handled. </p>\n<p>This is usually what you want, but it is useful to be able to override this, especially when dealing with <api-link class=\"cfy-ah\">@scroll</api-link> and other events that might fire rapidly.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"1.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @click.silent=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>"
        },
        {
          "name": "@wait",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "pause handler for `n` duration (default 250ms)",
            "detail": "(time = 500ms)"
          },
          "docs": "<p>The wait modifier delays the execution of subsequent modifiers and callback. It defaults to wait for 250ms, which can be overridden by passing a number or time as the first/only argument.</p>\n"
        },
        {
          "name": "@throttle",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)",
            "summary": "ensures that handler triggers at most every `n` seconds"
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">throttle</app-code-inline> modifier ensures the handler is called at most every <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">n</app-code-inline> milliseconds (defaults to 500ms). This can be useful for events that fire very rapidly like <api-link class=\"cfy-ah\">@scroll</api-link>, <api-link class=\"cfy-ah\">@pointermove</api-link> etc.</p>\n<p>See <api-link class=\"cfy-ah\">@event.cooldown</api-link> and <api-link class=\"cfy-ah\">@event.debounce</api-link>.</p>\n"
        },
        {
          "name": "@cooldown",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)",
            "summary": "disable handler for a duration after trigger"
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">cooldown</app-code-inline> modifier ensures the handler is called at most every <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">n</app-code-inline> milliseconds (defaults to 500ms). This can be useful for events that fire very rapidly like <api-link class=\"cfy-ah\">@scroll</api-link>, <api-link class=\"cfy-ah\">@pointermove</api-link> etc.</p>\n<p>See <api-link class=\"cfy-ah\">@event.throttle</api-link> and <api-link class=\"cfy-ah\">@event.debounce</api-link>.</p>\n"
        },
        {
          "name": "@debounce",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(time = 500ms)",
            "summary": "dont trigger until no events has been handled for `n` time"
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">debounce</app-code-inline> modifier ensures that a minimum amount of time has elapsed after the user stops interacting and before calling the handler. This is especially useful, for example, when querying an API and not wanting to perform a request on every keystroke.\n<app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">See</app-code-inline>@event.cooldown<app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">and</app-code-inline>@event.throttle`.</p>\n"
        },
        {
          "name": "@trusted",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https"
          },
          "docs": "<p>Stops handling unless event is trusted</p>\n"
        },
        {
          "name": "@self",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "Only trigger handler if event.target is the element itself"
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">self</app-code-inline> event modifier is a handy way of reacting to events only when they are clicked on the actual element you are interacting with and not, for example, a child element. This can be useful for things like modal wrappers when you only want to react when clicking directly.</p>\n"
        },
        {
          "name": "@sel",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(selector)"
          },
          "docs": "<p>Only trigger handler if event.target matches selector</p>\n"
        },
        {
          "name": "@if",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(condition)"
          },
          "docs": "<p>Only trigger condition is truthy</p>\n"
        },
        {
          "name": "@emit",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "detail",
              "kind": "parameterName"
            },
            "detail": "(name,detail = {})"
          },
          "docs": "<p>Trigger another event via this handler {@link MyClass}</p>\n"
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
        },
        {
          "name": "@log",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(...data)"
          },
          "docs": "<p>Logs to console</p>\n"
        },
        {
          "name": "detail",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "originalEvent",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        }
      ],
      "docs": "<p>An event which takes place in the DOM.</p>\n",
      "tags": {}
    },
    {
      "name": "UIEvent",
      "kind": "eventinterface",
      "extends": "Event",
      "meta": {},
      "members": [
        {
          "name": "detail",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "view",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        }
      ],
      "docs": "<p>Simple user interface events.</p>\n",
      "tags": {}
    },
    {
      "name": "MouseEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {},
      "members": [
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "button",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "buttons",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "movementX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "movementY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "pageX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "pageY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "relatedTarget",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "screenX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "screenY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "x",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "y",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getModifierState",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "initMouseEvent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "@ctrl",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if ctrl key is pressed</p>\n"
        },
        {
          "name": "@alt",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if alt key is pressed</p>\n"
        },
        {
          "name": "@shift",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if shift key is pressed</p>\n"
        },
        {
          "name": "@meta",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if meta key is pressed</p>\n"
        },
        {
          "name": "@middle",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if middle button is pressed</p>\n"
        },
        {
          "name": "@left",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if left/primary button is pressed</p>\n"
        },
        {
          "name": "@right",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if right button is pressed</p>\n"
        }
      ],
      "docs": "<p>Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.</p>\n",
      "tags": {}
    },
    {
      "name": "PointerEvent",
      "kind": "eventinterface",
      "extends": "MouseEvent",
      "meta": {},
      "members": [
        {
          "name": "height",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "isPrimary",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "pointerId",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "pointerType",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "pressure",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "tangentialPressure",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "tiltX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "tiltY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "twist",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "width",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getCoalescedEvents",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getPredictedEvents",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "@mouse",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a mouse device."
          },
          "docs": ""
        },
        {
          "name": "@pen",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a pen or stylus device."
          },
          "docs": ""
        },
        {
          "name": "@touch",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "The event was generated by a touch, such as a finger."
          },
          "docs": ""
        },
        {
          "name": "@pressure",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only when pressure is at least amount (defaults to 0.5)</p>\n"
        }
      ],
      "docs": "<p>The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.</p>\n",
      "tags": {}
    },
    {
      "name": "DragEvent",
      "kind": "eventinterface",
      "extends": "MouseEvent",
      "meta": {},
      "members": [
        {
          "name": "dataTransfer",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the DataTransfer object for the event.</p>\n"
        }
      ],
      "docs": "<p>A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.</p>\n",
      "tags": {}
    },
    {
      "name": "KeyboardEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {},
      "members": [
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "code",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "isComposing",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "key",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "location",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "repeat",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getModifierState",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "DOM_KEY_LOCATION_LEFT",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "DOM_KEY_LOCATION_NUMPAD",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "DOM_KEY_LOCATION_RIGHT",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "DOM_KEY_LOCATION_STANDARD",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "@enter",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if enter key is pressed</p>\n"
        },
        {
          "name": "@left",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if left key is pressed</p>\n"
        },
        {
          "name": "@right",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if right key is pressed</p>\n"
        },
        {
          "name": "@up",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if up key is pressed</p>\n"
        },
        {
          "name": "@down",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if down key is pressed</p>\n"
        },
        {
          "name": "@tab",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if tab key is pressed</p>\n"
        },
        {
          "name": "@esc",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if esc key is pressed</p>\n"
        },
        {
          "name": "@space",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if space key is pressed</p>\n"
        },
        {
          "name": "@del",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if del key is pressed</p>\n"
        },
        {
          "name": "@key",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Only if keyCode == code</p>\n"
        }
      ],
      "docs": "<p>KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.</p>\n",
      "tags": {}
    },
    {
      "name": "ImbaIntersectEvent",
      "kind": "eventinterface",
      "extends": "Event",
      "meta": {
        "Syntax": true,
        "Parameters": true
      },
      "members": [
        {
          "name": "@in",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Stop handling unless intersectionRatio has increased."
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">out</app-code-inline> modifier stops the handler unless intersectionRatio has <em>increased</em>.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"8.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @intersect.in=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block>"
        },
        {
          "name": "@out",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Stop handling unless intersectionRatio has decreased."
          },
          "docs": "<p>The <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">out</app-code-inline> modifier stops the handler unless intersectionRatio has <em>decreased</em>.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"9.imba\" data-lang=\"imba\"># Will only trigger when element starts intersecting\n&lt;div @intersect.out=handler&gt;\n# Will trigger whenever any part of the div is hidden\n&lt;div @intersect(1).out=handler&gt;</code></app-code-block>"
        },
        {
          "name": "@css",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "summary": "Set css variable `--ratio` to the intersectionRatio."
          },
          "docs": "<p>The css modifier sets a css variable --ratio on the event target with the current ratio.</p>\n"
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "name",
              "kind": "parameterName"
            }
          },
          "docs": "<p>Will add a class to the DOM element when intersecting</p>\n"
        },
        {
          "name": "entry",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>The raw IntersectionObserverEntry</p>\n"
        },
        {
          "name": "ratio",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Ratio of the intersectionRect to the boundingClientRect</p>\n"
        },
        {
          "name": "delta",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Difference in ratio since previous event</p>\n"
        }
      ],
      "docs": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> is a <a href=\"https://caniuse.com/#feat=intersectionobserver\">well-supported</a> API in modern browsers. It provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&#39;s viewport. Imba adds a simplified abstraction on top of this via the custom <api-link class=\"cfy-ah\">@intersect</api-link> event.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"2.imba\" data-lang=\"imba\"># Will only trigger when intersection ratio increases\n&lt;div @intersect.in=handler&gt;\n# Will only trigger when element is more than 50% visible\n&lt;div @intersect(0.5).in=handler&gt;</code></app-code-block><h4>Parameters</h4><p>The <api-link class=\"cfy-ah\">@intersect</api-link> events accepts several arguments. You can pass in an object with the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root\">root</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\">rootMargin</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold\">threshold</a>  properties supported by <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver\">IntersectionObserver</a>. </p>\n<app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"3.imba\" data-lang=\"imba\">&lt;div @intersect=handler&gt; # default options\n&lt;div @intersect(root: frame, rootMargin: '20px')=handler&gt;\n&lt;div @intersect(threshold: [0,0.5,1])=handler&gt;</code></app-code-block><p>For convenience, imba will convert certain arguments into options. A single number between 0 and 1 will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold\">threshold</a> option:</p>\n<app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"4.imba\" data-lang=\"imba\"># n 0-1 adds single threshold at n visibility\n&lt;div @intersect(0)=handler&gt; # {threshold: 0}\n&lt;div @intersect(0.5)=handler&gt; # {threshold: 0.5}\n&lt;div @intersect(1)=handler&gt; # {threshold: 1.0}</code></app-code-block><p>Any number above 1 will add n thresholds, spread evenly:</p>\n<app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"5.imba\" data-lang=\"imba\">&lt;div @intersect(2)=handler&gt; # {threshold: [0,1]}\n&lt;div @intersect(3)=handler&gt; # {threshold: [0,0.5,1]}\n&lt;div @intersect(5)=handler&gt; # {threshold: [0,0.25,0.5,0.75,1]}\n# ... and so forth</code></app-code-block><p>An element will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root\">root</a> option:</p>\n<app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"6.imba\" data-lang=\"imba\">&lt;div @intersect(frame)=handler&gt; # {root: frame}\n&lt;div @intersect(frame,3)=handler&gt; # {root: frame, threshold: [0,0.5,1]}</code></app-code-block><p>A string will map to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\">rootMargin</a> option:</p>\n<app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"7.imba\" data-lang=\"imba\">&lt;div @intersect(\"20px 10px\")=handler&gt; # {rootMargin: \"20px 10px\"}</code></app-code-block>",
      "tags": {}
    },
    {
      "name": "ImbaResizeEvent",
      "kind": "eventinterface",
      "extends": "UIEvent",
      "meta": {},
      "members": [
        {
          "name": "width",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "height",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "rect",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "entry",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "test",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        }
      ],
      "docs": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\">ResizeObserver</a> interface reports changes to the dimensions of an Element&#39;s content or border box. It has <a href=\"https://caniuse.com/#feat=resizeobserver\">good browser support</a> and is very useful in a wide variety of usecases. ResizeObserver avoids infinite callback loops and cyclic dependencies that are often created when resizing via a callback function. It does this by only processing elements deeper in the DOM in subsequent frames.</p>\n",
      "tags": {}
    },
    {
      "name": "ImbaTouch",
      "kind": "eventinterface",
      "extends": null,
      "meta": {},
      "members": [
        {
          "name": "x",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>The final X coordinate of the pointer (after modifiers)</p>\n"
        },
        {
          "name": "y",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>The final Y coordinate of the pointer (after modifiers)</p>\n"
        },
        {
          "name": "target",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientX",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>The X coordinate of the pointer in local (DOM content) coordinates.</p>\n"
        },
        {
          "name": "clientY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</p>\n"
        },
        {
          "name": "active?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if touch is still active</p>\n"
        },
        {
          "name": "ended?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if touch has ended</p>\n"
        },
        {
          "name": "ctrlKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">control</app-code-inline> key was down when the mouse event was fired.</p>\n"
        },
        {
          "name": "altKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">alt</app-code-inline> key was down when the mouse event was fired.</p>\n"
        },
        {
          "name": "shiftKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">shift</app-code-inline> key was down when the mouse event was fired.</p>\n"
        },
        {
          "name": "metaKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if the <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">shift</app-code-inline> key was down when the mouse event was fired.</p>\n"
        },
        {
          "name": "pointerType",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Indicates the device type that caused the event (mouse, pen, touch, etc.)</p>\n"
        },
        {
          "name": "pointerId",
          "meta": {},
          "kind": "property",
          "tags": {
            "summary": "A unique identifier for the pointer causing the event."
          },
          "docs": "<p>The identifier is unique, being different from the identifiers of all other active pointer events. Since the value may be randomly generated, it is not guaranteed to convey any particular meaning.</p>\n"
        },
        {
          "name": "@moved",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Only when touch has moved more than threshold",
            "detail": "(threshold = 4px)"
          },
          "docs": "<p>This guard will break the chain unless the touch has moved more than threshold. Once this threshold has been reached, all subsequent updates of touch will pass through. The element will also activate the <api-link class=\"cfy-ah\">@move</api-link> pseudostate during touch - after threshold is reached.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"10.imba\" data-lang=\"imba\">&lt;div @touch.moved(threshold=4px, dir='any')&gt;</code></app-code-block>"
        },
        {
          "name": "@sync",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Sync the x,y properties of touch to another object",
            "detail": "(data, xProp?, yProp?)"
          },
          "docs": "<p>A convenient touch modifier that takes care of updating the x,y values of some data during touch. When touch starts sync will remember the initial x,y values and only add/subtract based on movement of the touch.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"11.imba\" data-lang=\"imba\">&lt;div @touch.sync(target, xprop='x', yprop='y')&gt;</code></app-code-block>"
        },
        {
          "name": "@apply",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "see": "https",
            "detail": "(data, xProp?, yProp?)"
          },
          "docs": "<p>Sets the x and y properties of object to the x and y properties of touch.</p>\n"
        },
        {
          "name": "@fit",
          "meta": {
            "Syntax": true
          },
          "kind": "eventmodifier",
          "tags": {
            "summary": "Convert the coordinates of the touch to some other frame of reference.",
            "detail": "(target?,snap?)"
          },
          "docs": "<p>A very common need for touches is to convert the coordinates of the touch to some other frame of reference. When dragging you might want to make x,y relative to the container. For a custom slider you might want to convert the coordinates from pixels to relative offset of the slider track. There are loads of other scenarios where you&#39;d want to convert the coordinates to some arbitrary scale and offset. This can easily be achieved with fitting modifiers.</p>\n<h4>Syntax</h4><app-code-block class=\"cfy-af\" data-path=\"/docs\"><code class=\"cfy-ag\" data-name=\"12.imba\" data-lang=\"imba\">&lt;div @touch.fit&gt; # make x,y relative to the element\n&lt;div @touch.fit(start,end,snap?)&gt;\n&lt;div @touch.fit(target)&gt; # make x,y relative to a target element\n&lt;div @touch.fit(target,start,end,snap?)&gt;\n&lt;div @touch.fit(target,[xstart,ystart],[xend,yend],snap?)&gt;</code></app-code-block>"
        },
        {
          "name": "@reframe",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(target?, ax?, ay?)"
          },
          "docs": "<p>Just like @touch.fit but without clamping x,y to the bounds of the\ntarget.</p>\n"
        },
        {
          "name": "@pin",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(target?, ax?, ay?)"
          },
          "docs": "<p>Allow pinning the touch to a certain point in an element, so that\nall future x,y values are relative to this pinned point.</p>\n"
        },
        {
          "name": "@round",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "detail": "(to = 1)"
          },
          "docs": "<p>Round the x,y coordinates with an optional accuracy</p>\n"
        },
        {
          "name": "@flag",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {
            "param": {
              "text": "target",
              "kind": "parameterName"
            }
          },
          "docs": "<p>Add an html class to target for at least 250ms\nIf the callback returns a promise, the class\nwill not be removed until said promise has resolved</p>\n"
        }
      ],
      "docs": "<p>To make it easier and more fun to work with touches, Imba includes a custom <api-link class=\"cfy-ah\">@touch</api-link> event that combines <api-link class=\"cfy-ah\">@pointerdown</api-link> -&gt; <api-link class=\"cfy-ah\">@pointermove</api-link> -&gt; <api-link class=\"cfy-ah\">@pointerup</api-link> in one convenient handler, with modifiers for commonly needed functionality.</p>\n",
      "tags": {}
    },
    {
      "name": "ImbaHotkeyEvent",
      "kind": "eventinterface",
      "extends": "Event",
      "meta": {},
      "members": [
        {
          "name": "@capture",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Also trigger when input,textarea or a contenteditable is focused</p>\n"
        },
        {
          "name": "@global",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Trigger even if outside of the originating hotkey group</p>\n"
        },
        {
          "name": "@passive",
          "meta": {},
          "kind": "eventmodifier",
          "tags": {},
          "docs": "<p>Allow subsequent hotkey handlers for the same combo\nand don&#39;t automatically prevent default behaviour of originating\nkeyboard event</p>\n"
        }
      ],
      "docs": "",
      "tags": {}
    },
    {
      "name": "EventTarget",
      "kind": "interface",
      "extends": null,
      "meta": {},
      "members": [
        {
          "name": "addEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n"
        },
        {
          "name": "dispatchEvent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Dispatches a synthetic event event to target and returns true if either event&#39;s cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.</p>\n"
        },
        {
          "name": "removeEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n"
        }
      ],
      "docs": "<p>EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.</p>\n",
      "tags": {}
    },
    {
      "name": "Node",
      "kind": "interface",
      "extends": "EventTarget",
      "meta": {},
      "members": [
        {
          "name": "baseURI",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns node&#39;s node document&#39;s document base URL.</p>\n"
        },
        {
          "name": "childNodes",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the children.</p>\n"
        },
        {
          "name": "firstChild",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the first child.</p>\n"
        },
        {
          "name": "isConnected",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns true if node is connected and false otherwise.</p>\n"
        },
        {
          "name": "lastChild",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the last child.</p>\n"
        },
        {
          "name": "nextSibling",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the next sibling.</p>\n"
        },
        {
          "name": "nodeName",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns a string appropriate for the type of node.</p>\n"
        },
        {
          "name": "nodeType",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the type of node.</p>\n"
        },
        {
          "name": "nodeValue",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ownerDocument",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the node document. Returns null for documents.</p>\n"
        },
        {
          "name": "parentElement",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the parent element.</p>\n"
        },
        {
          "name": "parentNode",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the parent.</p>\n"
        },
        {
          "name": "previousSibling",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the previous sibling.</p>\n"
        },
        {
          "name": "textContent",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "appendChild",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "cloneNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns a copy of node. If deep is true, the copy also includes the node&#39;s descendants.</p>\n"
        },
        {
          "name": "compareDocumentPosition",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns a bitmask indicating the position of other relative to node.</p>\n"
        },
        {
          "name": "contains",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns true if other is an inclusive descendant of node, and false otherwise.</p>\n"
        },
        {
          "name": "getRootNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns node&#39;s root.</p>\n"
        },
        {
          "name": "hasChildNodes",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns whether node has children.</p>\n"
        },
        {
          "name": "insertBefore",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "isDefaultNamespace",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "isEqualNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns whether node and otherNode have the same properties.</p>\n"
        },
        {
          "name": "isSameNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "lookupNamespaceURI",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "lookupPrefix",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "normalize",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.</p>\n"
        },
        {
          "name": "removeChild",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "replaceChild",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ATTRIBUTE_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "CDATA_SECTION_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a CDATASection node.</p>\n"
        },
        {
          "name": "COMMENT_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a Comment node.</p>\n"
        },
        {
          "name": "DOCUMENT_FRAGMENT_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a DocumentFragment node.</p>\n"
        },
        {
          "name": "DOCUMENT_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a document.</p>\n"
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINED_BY",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Set when other is a descendant of node.</p>\n"
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINS",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Set when other is an ancestor of node.</p>\n"
        },
        {
          "name": "DOCUMENT_POSITION_DISCONNECTED",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Set when node and other are not in the same tree.</p>\n"
        },
        {
          "name": "DOCUMENT_POSITION_FOLLOWING",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Set when other is following node.</p>\n"
        },
        {
          "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "DOCUMENT_POSITION_PRECEDING",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Set when other is preceding node.</p>\n"
        },
        {
          "name": "DOCUMENT_TYPE_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a doctype.</p>\n"
        },
        {
          "name": "ELEMENT_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is an element.</p>\n"
        },
        {
          "name": "ENTITY_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ENTITY_REFERENCE_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "NOTATION_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "PROCESSING_INSTRUCTION_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a ProcessingInstruction node.</p>\n"
        },
        {
          "name": "TEXT_NODE",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>node is a Text node.</p>\n"
        }
      ],
      "docs": "<p>Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.</p>\n",
      "tags": {}
    },
    {
      "name": "Element",
      "kind": "interface",
      "extends": "Node",
      "meta": {},
      "members": [
        {
          "name": "attributes",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "classList",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Allows for manipulation of element&#39;s class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.</p>\n"
        },
        {
          "name": "className",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the value of element&#39;s class content attribute. Can be set to change it.</p>\n"
        },
        {
          "name": "clientHeight",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientLeft",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientTop",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "clientWidth",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "id",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the value of element&#39;s id content attribute. Can be set to change it.</p>\n"
        },
        {
          "name": "localName",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the local name.</p>\n"
        },
        {
          "name": "namespaceURI",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the namespace.</p>\n"
        },
        {
          "name": "onfullscreenchange",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "onfullscreenerror",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "outerHTML",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "ownerDocument",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the node document. Returns null for documents.</p>\n"
        },
        {
          "name": "prefix",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the namespace prefix.</p>\n"
        },
        {
          "name": "scrollHeight",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollLeft",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollTop",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollWidth",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "shadowRoot",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns element&#39;s shadow root, if any, and if shadow root&#39;s mode is &quot;open&quot;, and null otherwise.</p>\n"
        },
        {
          "name": "slot",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the value of element&#39;s slot content attribute. Can be set to change it.</p>\n"
        },
        {
          "name": "tagName",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Returns the HTML-uppercased qualified name.</p>\n"
        },
        {
          "name": "attachShadow",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Creates a shadow root for element and returns it.</p>\n"
        },
        {
          "name": "closest",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.</p>\n"
        },
        {
          "name": "getAttribute",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns element&#39;s first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.</p>\n"
        },
        {
          "name": "getAttributeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns element&#39;s attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.</p>\n"
        },
        {
          "name": "getAttributeNames",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns the qualified names of all element&#39;s attributes. Can contain duplicates.</p>\n"
        },
        {
          "name": "getAttributeNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getAttributeNodeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getBoundingClientRect",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getClientRects",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getElementsByClassName",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.</p>\n"
        },
        {
          "name": "getElementsByTagName",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "getElementsByTagNameNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "hasAttribute",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.</p>\n"
        },
        {
          "name": "hasAttributeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns true if element has an attribute whose namespace is namespace and local name is localName.</p>\n"
        },
        {
          "name": "hasAttributes",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns true if element has attributes, and false otherwise.</p>\n"
        },
        {
          "name": "hasPointerCapture",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "insertAdjacentElement",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "insertAdjacentHTML",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "insertAdjacentText",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "matches",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Returns true if matching selectors against element&#39;s root yields element, and false otherwise.</p>\n"
        },
        {
          "name": "msGetRegionContent",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "releasePointerCapture",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "removeAttribute",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes element&#39;s first attribute whose qualified name is qualifiedName.</p>\n"
        },
        {
          "name": "removeAttributeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes element&#39;s attribute whose namespace is namespace and local name is localName.</p>\n"
        },
        {
          "name": "removeAttributeNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "requestFullscreen",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Displays element fullscreen and resolves promise when done.</p>\n<p>When supplied, options&#39;s navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to &quot;show&quot;, navigation simplicity is preferred over screen space, and if set to &quot;hide&quot;, more screen space is preferred. User agents are always free to honor user preference over the application&#39;s. The default value &quot;auto&quot; indicates no application preference.</p>\n"
        },
        {
          "name": "requestPointerLock",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scroll",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollBy",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollIntoView",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "scrollTo",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "setAttribute",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Sets the value of element&#39;s first attribute whose qualified name is qualifiedName to value.</p>\n"
        },
        {
          "name": "setAttributeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Sets the value of element&#39;s attribute whose namespace is namespace and local name is localName to value.</p>\n"
        },
        {
          "name": "setAttributeNode",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "setAttributeNodeNS",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "setPointerCapture",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "toggleAttribute",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>If force is not given, &quot;toggles&quot; qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.</p>\n<p>Returns true if qualifiedName is now present, and false otherwise.</p>\n"
        },
        {
          "name": "webkitMatchesSelector",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "addEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n"
        },
        {
          "name": "removeEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n"
        },
        {
          "name": "schedule",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Schedule this element to render after imba.commit()</p>\n"
        },
        {
          "name": "unschedule",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "data",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "hotkey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "hotkey__",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "route",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "route__",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "router",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "$key",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Gives elements a stable identity inside lists</p>\n"
        },
        {
          "name": "hotkeys",
          "meta": {},
          "kind": "property",
          "tags": {
            "hotkey": "events inside this group will be triggered\nwhen this element or a child has focus."
          },
          "docs": "<p>Sets whether @hotkey events inside of this element\nis enabled or not. If explicitly set to true, only</p>\n"
        },
        {
          "name": "ease",
          "meta": {},
          "kind": "property",
          "tags": {
            "see": ""
          },
          "docs": "<p>Enable transitions for when element is attached / detached</p>\n"
        },
        {
          "name": "flags",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "emit",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "focus",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "blur",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "log",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        }
      ],
      "docs": "<p>Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.</p>\n",
      "tags": {}
    },
    {
      "name": "HTMLElement",
      "kind": "interface",
      "extends": "Element",
      "meta": {},
      "members": [
        {
          "name": "accessKey",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "accessKeyLabel",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "autocapitalize",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "dir",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "draggable",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "hidden",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "innerText",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "lang",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetHeight",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetLeft",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetParent",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetTop",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "offsetWidth",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "spellcheck",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "title",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "translate",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "click",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "addEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.</p>\n<p>The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options&#39;s capture.</p>\n<p>When set to true, options&#39;s capture prevents callback from being invoked when the event&#39;s eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event&#39;s eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event&#39;s eventPhase attribute value is AT_TARGET.</p>\n<p>When set to true, options&#39;s passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.</p>\n<p>When set to true, options&#39;s once indicates that the callback will only be invoked once after which the event listener will be removed.</p>\n<p>The event listener is appended to target&#39;s event listener list and is not appended if it has the same type, callback, and capture.</p>\n"
        },
        {
          "name": "removeEventListener",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Removes the event listener in target&#39;s event listener list with the same type, callback, and options.</p>\n"
        }
      ],
      "docs": "<p>Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</p>\n",
      "tags": {}
    },
    {
      "name": "ImbaElement",
      "kind": "interface",
      "extends": "HTMLElement",
      "meta": {},
      "members": [
        {
          "name": "suspend",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Creates an instance of documenter.</p>\n"
        },
        {
          "name": "unsuspend",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "#parent",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "#context",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": ""
        },
        {
          "name": "render?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Return false if component should not render</p>\n"
        },
        {
          "name": "mounting?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component is currently being mounted</p>\n"
        },
        {
          "name": "mounted?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component is currently mounted in document</p>\n"
        },
        {
          "name": "awakened?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component has been awakened</p>\n"
        },
        {
          "name": "rendered?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component has been rendered</p>\n"
        },
        {
          "name": "suspended?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component has been suspended</p>\n"
        },
        {
          "name": "rendering?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component is currently rendering</p>\n"
        },
        {
          "name": "scheduled?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component is scheduled to automatically render</p>\n"
        },
        {
          "name": "hydrated?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component has been hydrated on the client</p>\n"
        },
        {
          "name": "ssr?",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>True if component was originally rendered on the server</p>\n"
        },
        {
          "name": "schedule",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": "<p>Schedule this element to render after imba.commit()</p>\n"
        },
        {
          "name": "unschedule",
          "meta": {},
          "kind": "method",
          "tags": {},
          "docs": ""
        },
        {
          "name": "autorender",
          "meta": {},
          "kind": "property",
          "tags": {},
          "docs": "<p>Schedule the element to update itself\nyes = render on events / imba.commit\nno = force manual render\nnull / undefined = render via parent\n(n)s = render every n s\n(n)ms = render every n ms\n(n)fps = render n times per second</p>\n"
        }
      ],
      "docs": "",
      "tags": {}
    },
    {
      "name": "abort",
      "kind": "event",
      "type": "UIEvent",
      "meta": {},
      "docs": "<p>The loading of a resource has been aborted.</p>\n",
      "tags": {
        "summary": "<p>Fires when the user aborts the download.</p>\n"
      }
    },
    {
      "name": "auxclick",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "cancel",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "canplay",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "<p>The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</p>\n",
      "tags": {
        "summary": "<p>Occurs when playback is possible, but would require further buffering.</p>\n"
      }
    },
    {
      "name": "canplaythrough",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "<p>The user agent can play the media up to its end without having to stop for further buffering of content.</p>\n",
      "tags": {}
    },
    {
      "name": "change",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "<p>The change event is fired for <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;input&gt;</app-code-inline>, <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;select&gt;</app-code-inline>, and <app-code-inline class=\"cfy-ai\" data-lang=\"unknown\">&lt;textarea&gt;</app-code-inline> elements when a change to the element&#39;s value is committed by the user.</p>\n",
      "tags": {
        "summary": "<p>Fires when the contents of the object or selection have changed.</p>\n"
      }
    },
    {
      "name": "click",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "<p>A pointing device button has been pressed and released on an element.</p>\n",
      "tags": {
        "summary": "<p>Fires when the user clicks the left mouse button on the object</p>\n"
      }
    },
    {
      "name": "close",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "contextmenu",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user clicks the right mouse button in the client area, opening the context menu.</p>\n"
      }
    },
    {
      "name": "cuechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "dblclick",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user double-clicks the object.</p>\n"
      }
    },
    {
      "name": "drag",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the source object continuously during a drag operation.</p>\n"
      }
    },
    {
      "name": "dragend",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the source object when the user releases the mouse at the close of a drag operation.</p>\n"
      }
    },
    {
      "name": "dragenter",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the target element when the user drags the object to a valid drop target.</p>\n"
      }
    },
    {
      "name": "dragleave",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.</p>\n"
      }
    },
    {
      "name": "dragover",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the target element continuously while the user drags the object over a valid drop target.</p>\n"
      }
    },
    {
      "name": "dragstart",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires on the source object when the user starts to drag a text selection or selected object.</p>\n"
      }
    },
    {
      "name": "drop",
      "kind": "event",
      "type": "DragEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summaryz": "Fires when an element or text selection is dropped on a valid drop target."
      }
    },
    {
      "name": "durationchange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the duration attribute is updated.</p>\n"
      }
    },
    {
      "name": "emptied",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the media element is reset to its initial state.</p>\n"
      }
    },
    {
      "name": "ended",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the end of playback is reached.</p>\n"
      }
    },
    {
      "name": "hotkey",
      "kind": "event",
      "type": "ImbaHotkeyEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "input",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "invalid",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "intersect",
      "kind": "event",
      "type": "ImbaIntersectEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "keydown",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user presses a key.</p>\n"
      }
    },
    {
      "name": "keypress",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user presses an alphanumeric key.</p>\n"
      }
    },
    {
      "name": "keyup",
      "kind": "event",
      "type": "KeyboardEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user releases a key.</p>\n"
      }
    },
    {
      "name": "load",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires immediately after the browser loads the object.</p>\n"
      }
    },
    {
      "name": "loadeddata",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when media data is loaded at the current playback position.</p>\n"
      }
    },
    {
      "name": "loadedmetadata",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the duration and dimensions of the media have been determined.</p>\n"
      }
    },
    {
      "name": "loadstart",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when Internet Explorer begins looking for media data.</p>\n"
      }
    },
    {
      "name": "mousedown",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user clicks the object with either mouse button.</p>\n"
      }
    },
    {
      "name": "mouseenter",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "mouseleave",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "mousemove",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user moves the mouse over the object.</p>\n"
      }
    },
    {
      "name": "mouseout",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user moves the mouse pointer outside the boundaries of the object.</p>\n"
      }
    },
    {
      "name": "mouseover",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user moves the mouse pointer into the object.</p>\n"
      }
    },
    {
      "name": "mouseup",
      "kind": "event",
      "type": "MouseEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user releases a mouse button while the mouse is over the object.</p>\n"
      }
    },
    {
      "name": "pause",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when playback is paused.</p>\n"
      }
    },
    {
      "name": "play",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the play method is requested.</p>\n"
      }
    },
    {
      "name": "playing",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the audio or video has started playing.</p>\n"
      }
    },
    {
      "name": "pointercancel",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "A browser fires this event if it concludes the pointer will no longer be able to generate events (for example the related device is deactivated)."
      }
    },
    {
      "name": "pointerdown",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer becomes active buttons state."
      }
    },
    {
      "name": "pointerenter",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown)."
      }
    },
    {
      "name": "pointerleave",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer."
      }
    },
    {
      "name": "pointermove",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer changes coordinates. This event is also used if the change in pointer state can not be reported by other events."
      }
    },
    {
      "name": "pointerout",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired for several reasons including: pointer is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer."
      }
    },
    {
      "name": "pointerover",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer is moved into an element's hit test boundaries."
      }
    },
    {
      "name": "pointerup",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when a pointer is no longer active buttons state."
      }
    },
    {
      "name": "gotpointercapture",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired when an element receives pointer capture."
      }
    },
    {
      "name": "lostpointercapture",
      "kind": "event",
      "type": "PointerEvent",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "Fired after pointer capture is released for a pointer."
      }
    },
    {
      "name": "ratechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the playback rate is increased or decreased.</p>\n"
      }
    },
    {
      "name": "reset",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user resets a form.</p>\n"
      }
    },
    {
      "name": "resize",
      "kind": "event",
      "type": "ImbaResizeEvent",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "scroll",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the user repositions the scroll box in the scroll bar on the object.</p>\n"
      }
    },
    {
      "name": "seeked",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the seek operation ends.</p>\n"
      }
    },
    {
      "name": "seeking",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the current playback position is moved.</p>\n"
      }
    },
    {
      "name": "select",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Fires when the current selection changes.</p>\n"
      }
    },
    {
      "name": "selectionchange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "selectstart",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "stalled",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the download has stopped.</p>\n"
      }
    },
    {
      "name": "submit",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "suspend",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs if the load operation has been intentionally halted.</p>\n"
      }
    },
    {
      "name": "timeupdate",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs to indicate the current playback position.</p>\n"
      }
    },
    {
      "name": "toggle",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "touch",
      "kind": "event",
      "type": "ImbaTouch",
      "meta": {},
      "docs": "",
      "tags": {}
    },
    {
      "name": "volumechange",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when the volume is changed, or playback is muted or unmuted.</p>\n"
      }
    },
    {
      "name": "waiting",
      "kind": "event",
      "type": "Event",
      "meta": {},
      "docs": "",
      "tags": {
        "summary": "<p>Occurs when playback stops because the next frame of a video resource is not available.</p>\n"
      }
    },
    {
      "name": "px",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "padding-(left+right)",
        "custom": true,
        "padding": 1
      },
      "docs": ""
    },
    {
      "name": "py",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "padding-(top+bottom)",
        "custom": true,
        "padding": 1
      },
      "docs": ""
    },
    {
      "name": "mx",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "margin-(left+right)",
        "custom": true,
        "margin": 1
      },
      "docs": ""
    },
    {
      "name": "my",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": ""
    },
    {
      "name": "size",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "width+height",
        "custom": true
      },
      "docs": "<p>undefined</p>\n"
    },
    {
      "name": "j",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "justify-(items+content)",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "a",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "align-(items+content)",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "ja",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "place-(items+content)",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "rdt",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "border-top-(left+right)-radius",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "rdl",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "border-(top+bottom)-left-radius",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "rdb",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "border-bottom-(left+right)-radius",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "rdr",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "border-(top+bottom)-right-radius",
        "custom": true
      },
      "docs": ""
    },
    {
      "name": "transition",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tween"
      },
      "docs": "<p>Shorthand property combines four of the transition properties into a single property.</p>\n",
      "alias": "tween"
    },
    {
      "name": "x",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: translateX(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform translateX()</p>\n"
    },
    {
      "name": "y",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: translateY(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform translateY()</p>\n"
    },
    {
      "name": "z",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: translateZ(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform translateZ()</p>\n"
    },
    {
      "name": "skew-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: skewX(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform skewX()</p>\n"
    },
    {
      "name": "skew-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: skewY(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform skewY()</p>\n"
    },
    {
      "name": "scale-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: scaleX(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform scaleX()</p>\n"
    },
    {
      "name": "scale-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: scaleY(...)",
        "custom": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform scaleY()</p>\n"
    },
    {
      "name": "rotate",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "detail": "transform: rotate(...)",
        "custom": true,
        "skip": true,
        "transform": 1
      },
      "docs": "<p>Shorthand for setting transform rotate()</p>\n"
    },
    {
      "name": "ease",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "custom": true
      },
      "docs": "<p>Shorthand for setting transform skeq-y()</p>\n",
      "alias": "e"
    },
    {
      "name": "ease-transform",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand for setting transform scale-x()</p>\n",
      "alias": "et"
    },
    {
      "name": "ease-colors",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand for setting transform scale-x()</p>\n",
      "alias": "ec"
    },
    {
      "name": "ease-opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand for setting transform scale-x()</p>\n",
      "alias": "eo"
    },
    {
      "name": "hue",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "custom": true
      },
      "docs": "<p>Set color alias</p>\n"
    },
    {
      "name": "width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "w"
      },
      "docs": "<p>Specifies the width of the content area, padding area or border area (depending on &#39;box-sizing&#39;) of certain boxes.</p>\n",
      "alias": "w"
    },
    {
      "name": "height",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "h"
      },
      "docs": "<p>Specifies the height of the content area, padding area or border area (depending on &#39;box-sizing&#39;) of certain boxes.</p>\n",
      "alias": "h"
    },
    {
      "name": "display",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "d"
      },
      "docs": "<p>In combination with &#39;float&#39; and &#39;position&#39;, determines the type of box or boxes that are generated for an element.</p>\n",
      "alias": "d"
    },
    {
      "name": "padding",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "p",
        "padding": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n",
      "alias": "p"
    },
    {
      "name": "position",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pos"
      },
      "docs": "<p>The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.</p>\n",
      "alias": "pos"
    },
    {
      "name": "border",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bd"
      },
      "docs": "<p>Shorthand property for setting border width, style, and color.</p>\n",
      "alias": "bd"
    },
    {
      "name": "margin",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "m",
        "margin": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.</p>\n",
      "alias": "m"
    },
    {
      "name": "svg",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Set asset as inline background svg</p>\n"
    },
    {
      "name": "top",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "t"
      },
      "docs": "<p>Specifies how far an absolutely positioned box&#39;s top margin edge is offset below the top edge of the box&#39;s &#39;containing block&#39;.</p>\n",
      "alias": "t"
    },
    {
      "name": "left",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "l"
      },
      "docs": "<p>Specifies how far an absolutely positioned box&#39;s left margin edge is offset to the right of the left edge of the box&#39;s &#39;containing block&#39;.</p>\n",
      "alias": "l"
    },
    {
      "name": "margin-top",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "mt",
        "margin": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n",
      "alias": "mt"
    },
    {
      "name": "color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "c"
      },
      "docs": "<p>Sets the color of an element&#39;s text</p>\n",
      "alias": "c"
    },
    {
      "name": "font-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "fs",
        "font": 1
      },
      "docs": "<p>Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.</p>\n",
      "alias": "fs"
    },
    {
      "name": "background-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgc",
        "bg": 1
      },
      "docs": "<p>Sets the background color of an element.</p>\n",
      "alias": "bgc"
    },
    {
      "name": "text-align",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ta",
        "text": 1
      },
      "docs": "<p>Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.</p>\n",
      "alias": "ta"
    },
    {
      "name": "opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "o"
      },
      "docs": "<p>Opacity of an element&#39;s text, where 1 is opaque and 0 is entirely transparent.</p>\n",
      "alias": "o"
    },
    {
      "name": "background",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bg",
        "bg": 1
      },
      "docs": "<p>Shorthand property for setting most background properties at the same place in the style sheet.</p>\n",
      "alias": "bg"
    },
    {
      "name": "font-weight",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "fw",
        "font": 1
      },
      "docs": "<p>Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.</p>\n",
      "alias": "fw"
    },
    {
      "name": "overflow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "of",
        "layout": 1
      },
      "docs": "<p>Shorthand for setting &#39;overflow-x&#39; and &#39;overflow-y&#39;.</p>\n",
      "alias": "of"
    },
    {
      "name": "font-family",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ff",
        "font": 1
      },
      "docs": "<p>Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.</p>\n",
      "alias": "ff"
    },
    {
      "name": "float",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.</p>\n"
    },
    {
      "name": "line-height",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "lh"
      },
      "docs": "<p>Determines the block-progression dimension of the text content area of an inline box.</p>\n",
      "alias": "lh"
    },
    {
      "name": "box-sizing",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the behavior of the &#39;width&#39; and &#39;height&#39; properties.</p>\n"
    },
    {
      "name": "text-decoration",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "td",
        "text": 1
      },
      "docs": "<p>Decorations applied to font used for an element&#39;s text.</p>\n",
      "alias": "td"
    },
    {
      "name": "z-index",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "zi",
        "transform": 1
      },
      "docs": "<p>For a positioned box, the &#39;z-index&#39; property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.</p>\n",
      "alias": "zi"
    },
    {
      "name": "vertical-align",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "va"
      },
      "docs": "<p>Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.</p>\n",
      "alias": "va"
    },
    {
      "name": "cursor",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Allows control over cursor appearance in an element</p>\n"
    },
    {
      "name": "margin-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ml",
        "margin": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n",
      "alias": "ml"
    },
    {
      "name": "border-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rd",
        "radius": 1,
        "border": 1
      },
      "docs": "<p>Defines the radii of the outer border edge.</p>\n",
      "alias": "rd"
    },
    {
      "name": "margin-bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "mb",
        "margin": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n",
      "alias": "mb"
    },
    {
      "name": "margin-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "mr",
        "margin": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..</p>\n",
      "alias": "mr"
    },
    {
      "name": "right",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "r"
      },
      "docs": "<p>Specifies how far an absolutely positioned box&#39;s right margin edge is offset to the left of the right edge of the box&#39;s &#39;containing block&#39;.</p>\n",
      "alias": "r"
    },
    {
      "name": "padding-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pl",
        "padding": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n",
      "alias": "pl"
    },
    {
      "name": "padding-top",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pt",
        "padding": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n",
      "alias": "pt"
    },
    {
      "name": "max-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Allows authors to constrain content width to a certain range.</p>\n"
    },
    {
      "name": "bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "b"
      },
      "docs": "<p>Specifies how far an absolutely positioned box&#39;s bottom margin edge is offset above the bottom edge of the box&#39;s &#39;containing block&#39;.</p>\n",
      "alias": "b"
    },
    {
      "name": "content",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines which page-based occurrence of a given element is applied to a counter or string value.</p>\n"
    },
    {
      "name": "box-shadow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "shadow",
        "shadow": 1
      },
      "docs": "<p>Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional &#39;inset&#39; keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.</p>\n",
      "alias": "shadow"
    },
    {
      "name": "background-image",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgi",
        "bg": 1
      },
      "docs": "<p>Sets the background image(s) of an element.</p>\n",
      "alias": "bgi"
    },
    {
      "name": "padding-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pr",
        "padding": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n",
      "alias": "pr"
    },
    {
      "name": "white-space",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ws"
      },
      "docs": "<p>Shorthand property for the &#39;white-space-collapsing&#39; and &#39;text-wrap&#39; properties.</p>\n",
      "alias": "ws"
    },
    {
      "name": "padding-bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pb",
        "padding": 1
      },
      "docs": "<p>Shorthand property to set values the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.</p>\n",
      "alias": "pb"
    },
    {
      "name": "min-height",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Allows authors to constrain content height to a certain range.</p>\n"
    },
    {
      "name": "transform",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "transform": 1
      },
      "docs": "<p>A two-dimensional transformation is applied to an element through the &#39;transform&#39; property. This property contains a list of transform functions similar to those allowed by SVG.</p>\n"
    },
    {
      "name": "border-bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bdb",
        "border": 1
      },
      "docs": "<p>Shorthand property for setting border width, style and color.</p>\n",
      "alias": "bdb"
    },
    {
      "name": "visibility",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the ‘display’ property to ‘none’ to suppress box generation altogether).</p>\n"
    },
    {
      "name": "background-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgp",
        "bg": 1
      },
      "docs": "<p>Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.</p>\n",
      "alias": "bgp"
    },
    {
      "name": "border-top",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bdt",
        "border": 1
      },
      "docs": "<p>Shorthand property for setting border width, style and color</p>\n",
      "alias": "bdt"
    },
    {
      "name": "min-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Allows authors to constrain content width to a certain range.</p>\n"
    },
    {
      "name": "outline",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand property for &#39;outline-style&#39;, &#39;outline-width&#39;, and &#39;outline-color&#39;.</p>\n"
    },
    {
      "name": "border-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bc",
        "border": 1
      },
      "docs": "<p>The color of the border around all four edges of an element.</p>\n",
      "alias": "bc"
    },
    {
      "name": "background-repeat",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgr",
        "bg": 1
      },
      "docs": "<p>Specifies how background images are tiled after they have been sized and positioned.</p>\n",
      "alias": "bgr"
    },
    {
      "name": "text-transform",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tt",
        "text": 1
      },
      "docs": "<p>Controls capitalization effects of an element’s text.</p>\n",
      "alias": "tt"
    },
    {
      "name": "background-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgs",
        "bg": 1
      },
      "docs": "<p>Specifies the size of the background images.</p>\n",
      "alias": "bgs"
    },
    {
      "name": "clear",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates which sides of an element&#39;s box(es) may not be adjacent to an earlier floating box. The &#39;clear&#39; property does not consider floats inside the element itself or in other block formatting contexts.</p>\n"
    },
    {
      "name": "max-height",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Allows authors to constrain content height to a certain range.</p>\n"
    },
    {
      "name": "list-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand for setting &#39;list-style-type&#39;, &#39;list-style-position&#39; and &#39;list-style-image&#39;</p>\n"
    },
    {
      "name": "font-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.</p>\n"
    },
    {
      "name": "font",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand property for setting &#39;font-style&#39;, &#39;font-variant&#39;, &#39;font-weight&#39;, &#39;font-size&#39;, &#39;line-height&#39;, and &#39;font-family&#39;, at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.</p>\n"
    },
    {
      "name": "border-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bdl",
        "border": 1
      },
      "docs": "<p>Shorthand property for setting border width, style and color</p>\n",
      "alias": "bdl"
    },
    {
      "name": "border-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bdr",
        "border": 1
      },
      "docs": "<p>Shorthand property for setting border width, style and color</p>\n",
      "alias": "bdr"
    },
    {
      "name": "text-overflow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Text can overflow for example when it is prevented from wrapping.</p>\n"
    },
    {
      "name": "border-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bw",
        "border": 1
      },
      "docs": "<p>Shorthand that sets the four &#39;border-*-width&#39; properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.</p>\n",
      "alias": "bw"
    },
    {
      "name": "justify-content",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "jc"
      },
      "docs": "<p>Aligns flex items along the main axis of the current line of the flex container.</p>\n",
      "alias": "jc"
    },
    {
      "name": "align-items",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ai"
      },
      "docs": "<p>Aligns flex items along the cross axis of the current line of the flex container.</p>\n",
      "alias": "ai"
    },
    {
      "name": "overflow-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ofy",
        "layout": 1
      },
      "docs": "<p>Specifies the handling of overflow in the vertical direction.</p>\n",
      "alias": "ofy"
    },
    {
      "name": "pointer-events",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "pe"
      },
      "docs": "<p>Specifies under what circumstances a given element can be the target element for a pointer event.</p>\n",
      "alias": "pe"
    },
    {
      "name": "border-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bs",
        "border": 1
      },
      "docs": "<p>The style of the border around edges of an element.</p>\n",
      "alias": "bs"
    },
    {
      "name": "letter-spacing",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ls"
      },
      "docs": "<p>Specifies the minimum, maximum, and optimal spacing between grapheme clusters.</p>\n",
      "alias": "ls"
    },
    {
      "name": "animation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand property combines six of the animation properties into a single property.</p>\n"
    },
    {
      "name": "overflow-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ofx",
        "layout": 1
      },
      "docs": "<p>Specifies the handling of overflow in the horizontal direction.</p>\n",
      "alias": "ofx"
    },
    {
      "name": "flex-direction",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "fld",
        "flex": 1
      },
      "docs": "<p>Specifies how flex items are placed in the flex container, by setting the direction of the flex container’s main axis.</p>\n",
      "alias": "fld"
    },
    {
      "name": "word-wrap",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.</p>\n"
    },
    {
      "name": "flex",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "fl",
        "flex": 1
      },
      "docs": "<p>Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.</p>\n",
      "alias": "fl"
    },
    {
      "name": "border-collapse",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Selects a table&#39;s border model.</p>\n"
    },
    {
      "name": "zoom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Non-standard. Specifies the magnification scale of the object. See &#39;transform: scale()&#39; for a standards-based alternative.</p>\n"
    },
    {
      "name": "list-style-type",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Used to construct the default contents of a list item’s marker</p>\n"
    },
    {
      "name": "border-bottom-left-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rdbl",
        "radius": 1,
        "border": 1
      },
      "docs": "<p>Defines the radii of the bottom left outer border edge.</p>\n",
      "alias": "rdbl"
    },
    {
      "name": "fill",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Paints the interior of the given graphical element.</p>\n"
    },
    {
      "name": "transform-origin",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "origin",
        "transform": 1
      },
      "docs": "<p>Establishes the origin of transformation for an element.</p>\n",
      "alias": "origin"
    },
    {
      "name": "flex-wrap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "flw",
        "flex": 1
      },
      "docs": "<p>Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.</p>\n",
      "alias": "flw"
    },
    {
      "name": "text-shadow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ts",
        "shadow": 1,
        "text": 1
      },
      "docs": "<p>Enables shadow effects to be applied to the text of the element.</p>\n",
      "alias": "ts"
    },
    {
      "name": "border-top-left-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rdtl",
        "radius": 1,
        "border": 1
      },
      "docs": "<p>Defines the radii of the top left outer border edge.</p>\n",
      "alias": "rdtl"
    },
    {
      "name": "user-select",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "us"
      },
      "docs": "<p>Controls the appearance of selection.</p>\n",
      "alias": "us"
    },
    {
      "name": "clip",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Deprecated. Use the &#39;clip-path&#39; property when support allows. Defines the visible portion of an element’s box.</p>\n"
    },
    {
      "name": "border-bottom-right-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rdbr",
        "radius": 1,
        "border": 1
      },
      "docs": "<p>Defines the radii of the bottom right outer border edge.</p>\n",
      "alias": "rdbr"
    },
    {
      "name": "word-break",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies line break opportunities for non-CJK scripts.</p>\n"
    },
    {
      "name": "border-top-right-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rdtr",
        "radius": 1,
        "border": 1
      },
      "docs": "<p>Defines the radii of the top right outer border edge.</p>\n",
      "alias": "rdtr"
    },
    {
      "name": "flex-grow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "flg",
        "flex": 1
      },
      "docs": "<p>Sets the flex grow factor. Negative numbers are invalid.</p>\n",
      "alias": "flg"
    },
    {
      "name": "border-top-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bct",
        "border": 1
      },
      "docs": "<p>Sets the color of the top border.</p>\n",
      "alias": "bct"
    },
    {
      "name": "border-bottom-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bcb",
        "border": 1
      },
      "docs": "<p>Sets the color of the bottom border.</p>\n",
      "alias": "bcb"
    },
    {
      "name": "flex-shrink",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "fls",
        "flex": 1
      },
      "docs": "<p>Sets the flex shrink factor. Negative numbers are invalid.</p>\n",
      "alias": "fls"
    },
    {
      "name": "text-rendering",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The ‘text-rendering’ property provides these hints.</p>\n"
    },
    {
      "name": "align-self",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "as"
      },
      "docs": "<p>Allows the default alignment along the cross axis to be overridden for individual flex items.</p>\n",
      "alias": "as"
    },
    {
      "name": "text-indent",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the &#39;hanging&#39; keyword is specified, in which case it affects all lines except the first.</p>\n"
    },
    {
      "name": "animation-timing-function",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes how the animation will progress over one cycle of its duration.</p>\n"
    },
    {
      "name": "border-spacing",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.</p>\n"
    },
    {
      "name": "direction",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the &#39;dir&#39; attribute and &#39;bdo&#39; element rather than this property.</p>\n"
    },
    {
      "name": "background-clip",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgclip",
        "bg": 1
      },
      "docs": "<p>Determines the background painting area.</p>\n",
      "alias": "bgclip"
    },
    {
      "name": "border-left-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bcl",
        "border": 1
      },
      "docs": "<p>Sets the color of the left border.</p>\n",
      "alias": "bcl"
    },
    {
      "name": "src",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font-face": "descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/src)"
      },
      "docs": ""
    },
    {
      "name": "touch-action",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines whether touch input may trigger default behavior supplied by user agent.</p>\n"
    },
    {
      "name": "border-right-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bcr",
        "border": 1
      },
      "docs": "<p>Sets the color of the right border.</p>\n",
      "alias": "bcr"
    },
    {
      "name": "transition-property",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the name of the CSS property to which the transition is applied.</p>\n"
    },
    {
      "name": "animation-name",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.</p>\n"
    },
    {
      "name": "filter",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.</p>\n"
    },
    {
      "name": "animation-duration",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the length of time that an animation takes to complete one cycle.</p>\n"
    },
    {
      "name": "overflow-wrap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "layout": 1
      },
      "docs": "<p>Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.</p>\n"
    },
    {
      "name": "transition-delay",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.</p>\n"
    },
    {
      "name": "stroke",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Paints along the outline of the given graphical element.</p>\n"
    },
    {
      "name": "font-variant",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Specifies variant representations of the font</p>\n"
    },
    {
      "name": "border-bottom-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bwb",
        "border": 1
      },
      "docs": "<p>Sets the thickness of the bottom border.</p>\n",
      "alias": "bwb"
    },
    {
      "name": "animation-delay",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines when the animation will start.</p>\n"
    },
    {
      "name": "border-top-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bwt",
        "border": 1
      },
      "docs": "<p>Sets the thickness of the top border.</p>\n",
      "alias": "bwt"
    },
    {
      "name": "transition-duration",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how long the transition from the old value to the new value should take.</p>\n"
    },
    {
      "name": "flex-basis",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "flb",
        "flex": 1
      },
      "docs": "<p>Sets the flex basis.</p>\n",
      "alias": "flb"
    },
    {
      "name": "will-change",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.</p>\n"
    },
    {
      "name": "animation-fill-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines what values are applied by the animation outside the time it is executing.</p>\n"
    },
    {
      "name": "outline-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Width of the outline.</p>\n"
    },
    {
      "name": "table-layout",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the algorithm used to lay out the table cells, rows, and columns.</p>\n"
    },
    {
      "name": "object-fit",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.</p>\n"
    },
    {
      "name": "order",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.</p>\n"
    },
    {
      "name": "transition-timing-function",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes how the intermediate values used during a transition will be calculated.</p>\n"
    },
    {
      "name": "resize",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.</p>\n"
    },
    {
      "name": "outline-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Style of the outline.</p>\n"
    },
    {
      "name": "border-right-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bwr",
        "border": 1
      },
      "docs": "<p>Sets the thickness of the right border.</p>\n",
      "alias": "bwr"
    },
    {
      "name": "stroke-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the width of the stroke on the current object.</p>\n"
    },
    {
      "name": "animation-iteration-count",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.</p>\n"
    },
    {
      "name": "align-content",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ac"
      },
      "docs": "<p>Aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how &#39;justify-content&#39; aligns individual items within the main-axis.</p>\n",
      "alias": "ac"
    },
    {
      "name": "outline-offset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Offset the outline and draw it beyond the border edge.</p>\n"
    },
    {
      "name": "backface-visibility",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines whether or not the &#39;back&#39; side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.</p>\n"
    },
    {
      "name": "border-left-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bwl",
        "border": 1
      },
      "docs": "<p>Sets the thickness of the left border.</p>\n",
      "alias": "bwl"
    },
    {
      "name": "flex-flow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "flf",
        "flex": 1
      },
      "docs": "<p>Specifies how flexbox items are placed in the flexbox.</p>\n",
      "alias": "flf"
    },
    {
      "name": "appearance",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Changes the appearance of buttons and other controls to resemble native controls.</p>\n"
    },
    {
      "name": "unicode-bidi",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The level of embedding with respect to the bidirectional algorithm.</p>\n"
    },
    {
      "name": "stroke-dasharray",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the pattern of dashes and gaps used to stroke paths.</p>\n"
    },
    {
      "name": "stroke-dashoffset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the distance into the dash pattern to start the dash.</p>\n"
    },
    {
      "name": "unicode-range",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font-face": "descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-range)"
      },
      "docs": ""
    },
    {
      "name": "word-spacing",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies additional spacing between “words”.</p>\n"
    },
    {
      "name": "text-size-adjust",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.</p>\n"
    },
    {
      "name": "border-top-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bst",
        "border": 1
      },
      "docs": "<p>Sets the style of the top border.</p>\n",
      "alias": "bst"
    },
    {
      "name": "border-bottom-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bsb",
        "border": 1
      },
      "docs": "<p>Sets the style of the bottom border.</p>\n",
      "alias": "bsb"
    },
    {
      "name": "animation-direction",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines whether or not the animation should play in reverse on alternate cycles.</p>\n"
    },
    {
      "name": "image-rendering",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.</p>\n"
    },
    {
      "name": "perspective",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.</p>\n"
    },
    {
      "name": "grid-template-columns",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gtc",
        "grid": 1
      },
      "docs": "<p>specifies, as a space-separated track list, the line names and track sizing functions of the grid.</p>\n",
      "alias": "gtc"
    },
    {
      "name": "list-style-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the position of the &#39;::marker&#39; pseudo-element&#39;s box in the list item.</p>\n"
    },
    {
      "name": "font-feature-settings",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.</p>\n"
    },
    {
      "name": "contain",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.</p>\n"
    },
    {
      "name": "background-position-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "bg": 1
      },
      "docs": "<p>If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.</p>\n"
    },
    {
      "name": "transform-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "transform": 1
      },
      "docs": "<p>Defines how nested elements are rendered in 3D space.</p>\n"
    },
    {
      "name": "background-origin",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bgo",
        "bg": 1
      },
      "docs": "<p>For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes &#39;box-decoration-break&#39; operates on to determine the background positioning area(s).</p>\n",
      "alias": "bgo"
    },
    {
      "name": "border-left-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bsl",
        "border": 1
      },
      "docs": "<p>Sets the style of the left border.</p>\n",
      "alias": "bsl"
    },
    {
      "name": "font-display",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use.</p>\n"
    },
    {
      "name": "clip-path",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.</p>\n"
    },
    {
      "name": "hyphens",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls whether hyphenation is allowed to create more break opportunities within a line of text.</p>\n"
    },
    {
      "name": "background-attachment",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bga",
        "bg": 1
      },
      "docs": "<p>Specifies whether the background images are fixed with regard to the viewport (&#39;fixed&#39;) or scroll along with the element (&#39;scroll&#39;) or its contents (&#39;local&#39;).</p>\n",
      "alias": "bga"
    },
    {
      "name": "border-right-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "bsr",
        "border": 1
      },
      "docs": "<p>Sets the style of the right border.</p>\n",
      "alias": "bsr"
    },
    {
      "name": "outline-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The color of the outline.</p>\n"
    },
    {
      "name": "margin-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>Logical &#39;margin-bottom&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "animation-play-state",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines whether the animation is running or paused.</p>\n"
    },
    {
      "name": "quotes",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies quotation marks for any number of embedded quotations.</p>\n"
    },
    {
      "name": "background-position-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "bg": 1
      },
      "docs": "<p>If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.</p>\n"
    },
    {
      "name": "font-stretch",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Selects a normal, condensed, or expanded face from a font family.</p>\n"
    },
    {
      "name": "stroke-linecap",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the shape to be used at the end of open subpaths when they are stroked.</p>\n"
    },
    {
      "name": "object-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the alignment of the replaced element inside its box.</p>\n"
    },
    {
      "name": "counter-reset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.</p>\n"
    },
    {
      "name": "margin-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>Logical &#39;margin-top&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "counter-increment",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Manipulate the value of existing counters.</p>\n"
    },
    {
      "name": "text-decoration-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tdc",
        "text": 1
      },
      "docs": "<p>Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.</p>\n",
      "alias": "tdc"
    },
    {
      "name": "list-style-image",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the &#39;list-style-type&#39; marker.</p>\n"
    },
    {
      "name": "column-count",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the optimal number of columns into which the content of the element will be flowed.</p>\n"
    },
    {
      "name": "border-image",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Shorthand property for setting &#39;border-image-source&#39;, &#39;border-image-slice&#39;, &#39;border-image-width&#39;, &#39;border-image-outset&#39; and &#39;border-image-repeat&#39;. Omitted values are set to their initial values.</p>\n"
    },
    {
      "name": "column-gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "cg"
      },
      "docs": "<p>Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.</p>\n",
      "alias": "cg"
    },
    {
      "name": "page-break-inside",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines rules for page breaks inside an element.</p>\n"
    },
    {
      "name": "fill-opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the opacity of the painting operation used to paint the interior the current object.</p>\n"
    },
    {
      "name": "padding-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>Logical &#39;padding-left&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "empty-cells",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.</p>\n"
    },
    {
      "name": "font-variant-ligatures",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Specifies control over which ligatures are enabled or disabled. A value of ‘normal’ implies that the defaults set by the font are used.</p>\n"
    },
    {
      "name": "text-decoration-skip",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>The text-decoration-skip CSS property specifies what parts of the element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.</p>\n"
    },
    {
      "name": "justify-self",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "js"
      },
      "docs": "<p>Defines the way of justifying a box inside its container along the appropriate axis.</p>\n",
      "alias": "js"
    },
    {
      "name": "page-break-after",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines rules for page breaks after an element.</p>\n"
    },
    {
      "name": "grid-template-rows",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gtr",
        "grid": 1
      },
      "docs": "<p>specifies, as a space-separated track list, the line names and track sizing functions of the grid.</p>\n",
      "alias": "gtr"
    },
    {
      "name": "padding-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>Logical &#39;padding-right&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "grid-gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "grid": 1
      },
      "docs": "<p>Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by &#39;gap&#39; property.</p>\n"
    },
    {
      "name": "all",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand that resets all properties except &#39;direction&#39; and &#39;unicode-bidi&#39;.</p>\n"
    },
    {
      "name": "grid-column",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gc",
        "grid": 1
      },
      "docs": "<p>Shorthand for &#39;grid-column-start&#39; and &#39;grid-column-end&#39;.</p>\n",
      "alias": "gc"
    },
    {
      "name": "stroke-opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the opacity of the painting operation used to stroke the current object.</p>\n"
    },
    {
      "name": "margin-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>Logical &#39;margin-left&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "margin-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>Logical &#39;margin-right&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "caret-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the color of the text insertion indicator.</p>\n"
    },
    {
      "name": "orphans",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.</p>\n"
    },
    {
      "name": "caption-side",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the position of the caption box with respect to the table box.</p>\n"
    },
    {
      "name": "perspective-origin",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.</p>\n"
    },
    {
      "name": "stop-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates what color to use at that gradient stop.</p>\n"
    },
    {
      "name": "widows",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.</p>\n"
    },
    {
      "name": "scroll-behavior",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.</p>\n"
    },
    {
      "name": "grid-column-gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gcg",
        "grid": 1
      },
      "docs": "<p>Specifies the gutters between grid columns. Replaced by &#39;column-gap&#39; property.</p>\n",
      "alias": "gcg"
    },
    {
      "name": "columns",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>A shorthand property which sets both &#39;column-width&#39; and &#39;column-count&#39;.</p>\n"
    },
    {
      "name": "column-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the width of columns in multicol elements.</p>\n"
    },
    {
      "name": "mix-blend-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the formula that must be used to mix the colors with the backdrop.</p>\n"
    },
    {
      "name": "font-kerning",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.</p>\n"
    },
    {
      "name": "border-image-slice",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.</p>\n"
    },
    {
      "name": "border-image-repeat",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.</p>\n"
    },
    {
      "name": "border-image-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The four values of &#39;border-image-width&#39; specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.</p>\n"
    },
    {
      "name": "grid-row",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gr",
        "grid": 1
      },
      "docs": "<p>Shorthand for &#39;grid-row-start&#39; and &#39;grid-row-end&#39;.</p>\n",
      "alias": "gr"
    },
    {
      "name": "tab-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.</p>\n"
    },
    {
      "name": "grid-row-gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "grg",
        "grid": 1
      },
      "docs": "<p>Specifies the gutters between grid rows. Replaced by &#39;row-gap&#39; property.</p>\n",
      "alias": "grg"
    },
    {
      "name": "text-decoration-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tds",
        "text": 1
      },
      "docs": "<p>Specifies the line style for underline, line-through and overline text decoration.</p>\n",
      "alias": "tds"
    },
    {
      "name": "line-break",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies what set of line breaking restrictions are in effect within the element.</p>\n"
    },
    {
      "name": "border-image-outset",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.</p>\n"
    },
    {
      "name": "column-rule",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand for setting &#39;column-rule-width&#39;, &#39;column-rule-style&#39;, and &#39;column-rule-color&#39; at the same place in the style sheet. Omitted values are set to their initial values.</p>\n"
    },
    {
      "name": "justify-items",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ji"
      },
      "docs": "<p>Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis</p>\n",
      "alias": "ji"
    },
    {
      "name": "grid-area",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ga",
        "grid": 1
      },
      "docs": "<p>Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for &#39;grid-row-start&#39;, &#39;grid-column-start&#39;, &#39;grid-row-end&#39;, and &#39;grid-column-end&#39;.</p>\n",
      "alias": "ga"
    },
    {
      "name": "stroke-miterlimit",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>When two line segments meet at a sharp angle and miter joins have been specified for &#39;stroke-linejoin&#39;, it is possible for the miter to extend far beyond the thickness of the line stroking the path.</p>\n"
    },
    {
      "name": "text-align-last",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Describes how the last line of a block or a line right before a forced line break is aligned when &#39;text-align&#39; is set to &#39;justify&#39;.</p>\n"
    },
    {
      "name": "backdrop-filter",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.</p>\n"
    },
    {
      "name": "grid-auto-rows",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gar",
        "grid": 1
      },
      "docs": "<p>Specifies the size of implicitly created rows.</p>\n",
      "alias": "gar"
    },
    {
      "name": "stroke-linejoin",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.</p>\n"
    },
    {
      "name": "shape-outside",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies an orthogonal rotation to be applied to an image before it is laid out.</p>\n"
    },
    {
      "name": "text-decoration-line",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tdl",
        "text": 1
      },
      "docs": "<p>Specifies what line decorations, if any, are added to the element.</p>\n",
      "alias": "tdl"
    },
    {
      "name": "scroll-snap-align",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-snap-align property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.</p>\n"
    },
    {
      "name": "fill-rule",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.</p>\n"
    },
    {
      "name": "grid-auto-flow",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gaf",
        "grid": 1
      },
      "docs": "<p>Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.</p>\n",
      "alias": "gaf"
    },
    {
      "name": "scroll-snap-type",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines how strictly snap points are enforced on the scroll container.</p>\n"
    },
    {
      "name": "page-break-before",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines rules for page breaks before an element.</p>\n"
    },
    {
      "name": "grid-column-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gcs",
        "grid": 1
      },
      "docs": "<p>Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n",
      "alias": "gcs"
    },
    {
      "name": "grid-template-areas",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gta",
        "grid": 1
      },
      "docs": "<p>Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.</p>\n",
      "alias": "gta"
    },
    {
      "name": "break-inside",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the page/column/region break behavior inside the principal box.</p>\n"
    },
    {
      "name": "column-fill",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.</p>\n"
    },
    {
      "name": "grid-column-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gce",
        "grid": 1
      },
      "docs": "<p>Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n",
      "alias": "gce"
    },
    {
      "name": "border-image-source",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Specifies an image to use instead of the border styles given by the &#39;border-style&#39; properties and as an additional background layer for the element. If the value is &#39;none&#39; or if the image cannot be displayed, the border styles will be used.</p>\n"
    },
    {
      "name": "overflow-anchor",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "ofa",
        "layout": 1
      },
      "docs": "<p>The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts.</p>\n",
      "alias": "ofa"
    },
    {
      "name": "grid-row-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "grs",
        "grid": 1
      },
      "docs": "<p>Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n",
      "alias": "grs"
    },
    {
      "name": "grid-row-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gre",
        "grid": 1
      },
      "docs": "<p>Determine a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.</p>\n",
      "alias": "gre"
    },
    {
      "name": "font-variant-numeric",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Specifies control over numerical forms.</p>\n"
    },
    {
      "name": "background-blend-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "bg": 1
      },
      "docs": "<p>Defines the blending mode of each background layer.</p>\n"
    },
    {
      "name": "text-decoration-skip-ink",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tdsi",
        "text": 1
      },
      "docs": "<p>The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.</p>\n",
      "alias": "tdsi"
    },
    {
      "name": "column-rule-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Sets the color of the column rule</p>\n"
    },
    {
      "name": "isolation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>In CSS setting to &#39;isolate&#39; will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.</p>\n"
    },
    {
      "name": "shape-rendering",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.</p>\n"
    },
    {
      "name": "column-rule-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Sets the style of the rule between columns of an element.</p>\n"
    },
    {
      "name": "border-inline-end-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-right-width&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-inline-start-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-left-width&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "grid-auto-columns",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gac",
        "grid": 1
      },
      "docs": "<p>Specifies the size of implicitly created columns.</p>\n",
      "alias": "gac"
    },
    {
      "name": "writing-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>This is a shorthand property for both &#39;direction&#39; and &#39;block-progression&#39;.</p>\n"
    },
    {
      "name": "clip-rule",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.</p>\n"
    },
    {
      "name": "font-variant-caps",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Specifies control over capitalized forms.</p>\n"
    },
    {
      "name": "text-anchor",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Used to align (start-, middle- or end-alignment) a string of text relative to a given point.</p>\n"
    },
    {
      "name": "stop-opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the opacity of a given gradient stop.</p>\n"
    },
    {
      "name": "mask",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points.</p>\n"
    },
    {
      "name": "column-span",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the page/column break behavior after the generated box.</p>\n"
    },
    {
      "name": "font-variant-east-asian",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Allows control of glyph substitute and positioning in East Asian text.</p>\n"
    },
    {
      "name": "text-underline-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear &#39;over&#39; (to the right of) the affected run of text</p>\n"
    },
    {
      "name": "break-after",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the page/column/region break behavior after the generated box.</p>\n"
    },
    {
      "name": "break-before",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Describes the page/column/region break behavior before the generated box.</p>\n"
    },
    {
      "name": "mask-type",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.</p>\n"
    },
    {
      "name": "column-rule-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Sets the width of the rule between columns. Negative values are not allowed.</p>\n"
    },
    {
      "name": "row-gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "rg"
      },
      "docs": "<p>The row-gap CSS property specifies the gutter between grid rows.</p>\n",
      "alias": "rg"
    },
    {
      "name": "text-orientation",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Specifies the orientation of text within a line.</p>\n"
    },
    {
      "name": "scroll-padding",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands.</p>\n"
    },
    {
      "name": "grid-template",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "gt",
        "grid": 1
      },
      "docs": "<p>Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.</p>\n",
      "alias": "gt"
    },
    {
      "name": "border-inline-end-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-right-color&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-inline-start-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-left-color&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "scroll-snap-stop",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-snap-stop CSS property defines whether the scroll container is allowed to &quot;pass over&quot; possible snap positions.</p>\n"
    },
    {
      "name": "shape-margin",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Adds a margin to a &#39;shape-outside&#39;. This defines a new shape that is the smallest contour that includes all the points that are the &#39;shape-margin&#39; distance outward in the perpendicular direction from a point on the underlying shape.</p>\n"
    },
    {
      "name": "shape-image-threshold",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.</p>\n"
    },
    {
      "name": "gap",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "g"
      },
      "docs": "<p>The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns.</p>\n",
      "alias": "g"
    },
    {
      "name": "min-inline-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;min-height&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "image-orientation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies an orthogonal rotation to be applied to an image before it is laid out.</p>\n"
    },
    {
      "name": "inline-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;height&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "padding-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>Logical &#39;padding-top&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "padding-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>Logical &#39;padding-bottom&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "text-combine-upright",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.</p>\n<p>This is used to produce an effect that is known as tate-chū-yoko (縦中横) in Japanese, or as 直書橫向 in Chinese.</p>\n"
    },
    {
      "name": "block-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;width&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "min-block-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;min-width&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "scroll-padding-top",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "border-inline-end-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-right-style&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-start-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-top-width&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-end-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-bottom-width&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-end-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-bottom-color&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-inline-start-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-left-style&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-start-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-top-color&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-end-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-bottom-style&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-start-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-top-style&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "font-variation-settings",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values.</p>\n"
    },
    {
      "name": "paint-order",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.</p>\n"
    },
    {
      "name": "color-interpolation-filters",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the color space for imaging operations performed via filter effects.</p>\n"
    },
    {
      "name": "marker-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the marker that will be drawn at the last vertices of the given markable element.</p>\n"
    },
    {
      "name": "scroll-padding-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "flood-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates what color to use to flood the current filter primitive subregion.</p>\n"
    },
    {
      "name": "flood-opacity",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates what opacity to use to flood the current filter primitive subregion.</p>\n"
    },
    {
      "name": "lighting-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the color of the light source for filter primitives &#39;feDiffuseLighting&#39; and &#39;feSpecularLighting&#39;.</p>\n"
    },
    {
      "name": "marker-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the marker that will be drawn at the first vertices of the given markable element.</p>\n"
    },
    {
      "name": "marker-mid",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the marker that will be drawn at all vertices except the first and last.</p>\n"
    },
    {
      "name": "marker",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given ‘path’ element or basic shape.</p>\n"
    },
    {
      "alias": "jac",
      "name": "place-content",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The place-content CSS shorthand property sets both the align-content and justify-content properties.</p>\n"
    },
    {
      "name": "offset-path",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The offset-path CSS property specifies the offset path where the element gets positioned. The exact element’s position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of &quot;0&quot; for offset-distance and an initial direction which specifies the rotation of the object to the initial position.</p>\n<p>In this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the object’s local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied.</p>\n"
    },
    {
      "name": "offset-rotate",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The offset-rotate CSS property defines the direction of the element while positioning along the offset path.</p>\n"
    },
    {
      "name": "offset-distance",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The offset-distance CSS property specifies a position along an offset-path.</p>\n"
    },
    {
      "name": "transform-box",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "transform": 1
      },
      "docs": "<p>The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate.</p>\n"
    },
    {
      "alias": "jai",
      "name": "place-items",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it.</p>\n"
    },
    {
      "name": "max-inline-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;max-height&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "max-block-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;max-width&#39;. Mapping depends on the element’s &#39;writing-mode&#39;.</p>\n"
    },
    {
      "name": "ruby-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.</p>\n"
    },
    {
      "name": "scroll-padding-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "scroll-padding-bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "scroll-padding-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "scroll-padding-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "scroll-padding-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "name": "scroll-padding-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport.</p>\n"
    },
    {
      "alias": "jas",
      "name": "place-self",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it.</p>\n"
    },
    {
      "name": "font-optical-sizing",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis.</p>\n"
    },
    {
      "name": "grid",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The grid CSS property is a shorthand property that sets all of the explicit grid properties (&#39;grid-template-rows&#39;, &#39;grid-template-columns&#39;, and &#39;grid-template-areas&#39;), and all the implicit grid properties (&#39;grid-auto-rows&#39;, &#39;grid-auto-columns&#39;, and &#39;grid-auto-flow&#39;), in a single declaration.</p>\n"
    },
    {
      "name": "border-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-left&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-right&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "border-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-bottom&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "offset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The offset CSS property is a shorthand property for animating an element along a defined path.</p>\n"
    },
    {
      "name": "border-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>Logical &#39;border-top&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "scroll-padding-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension.</p>\n"
    },
    {
      "name": "scroll-padding-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension.</p>\n"
    },
    {
      "name": "overscroll-behavior-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The overscroll-behavior-block CSS property sets the browser&#39;s behavior when the block direction boundary of a scrolling area is reached.</p>\n"
    },
    {
      "name": "overscroll-behavior-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The overscroll-behavior-inline CSS property sets the browser&#39;s behavior when the inline direction boundary of a scrolling area is reached.</p>\n"
    },
    {
      "name": "motion",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Shorthand property for setting &#39;motion-path&#39;, &#39;motion-offset&#39; and &#39;motion-rotation&#39;.</p>\n"
    },
    {
      "name": "font-size-adjust",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.</p>\n"
    },
    {
      "name": "inset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "text-justify",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>Selects the justification algorithm used when &#39;text-align&#39; is set to &#39;justify&#39;. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.</p>\n"
    },
    {
      "name": "motion-path",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the motion path the element gets positioned at.</p>\n"
    },
    {
      "name": "inset-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "inset-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "translate",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value.</p>\n"
    },
    {
      "name": "offset-anchor",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path.</p>\n"
    },
    {
      "name": "offset-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored.</p>\n"
    },
    {
      "name": "padding-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"
    },
    {
      "name": "orientation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The orientation CSS @media media feature can be used to apply styles based on the orientation of the viewport (or the page box, for paged media).</p>\n"
    },
    {
      "name": "user-zoom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The user-zoom CSS descriptor controls whether or not the user can change the zoom factor of a document defined by @viewport.</p>\n"
    },
    {
      "name": "margin-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"
    },
    {
      "name": "margin-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"
    },
    {
      "name": "padding-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "padding": 1
      },
      "docs": "<p>The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"
    },
    {
      "name": "inset-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "inset-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-block-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.</p>\n"
    },
    {
      "name": "border-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.</p>\n"
    },
    {
      "name": "inset-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "inset-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "enable-background",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Deprecated. Use &#39;isolation&#39; property instead when support allows. Specifies how the accumulation of the background image is managed.</p>\n"
    },
    {
      "name": "glyph-orientation-horizontal",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls glyph orientation when the inline-progression-direction is horizontal.</p>\n"
    },
    {
      "name": "glyph-orientation-vertical",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls glyph orientation when the inline-progression-direction is vertical.</p>\n"
    },
    {
      "name": "kerning",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.</p>\n"
    },
    {
      "name": "image-resolution",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the image’s intrinsic dimensions.</p>\n"
    },
    {
      "name": "max-zoom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The max-zoom CSS descriptor sets the maximum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom in any further than this, whether automatically or at the user&#39;s request.</p>\n<p>A zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out.</p>\n"
    },
    {
      "name": "min-zoom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The min-zoom CSS descriptor sets the minimum zoom factor of a document defined by the @viewport at-rule. The browser will not zoom out any further than this, whether automatically or at the user&#39;s request.</p>\n<p>A zoom factor of 1.0 or 100% corresponds to no zooming. Larger values are zoomed in. Smaller values are zoomed out.</p>\n"
    },
    {
      "name": "motion-offset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>A distance that describes the position along the specified motion path.</p>\n"
    },
    {
      "name": "motion-rotation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the direction of the element while positioning along the motion path.</p>\n"
    },
    {
      "name": "scroll-snap-points-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the positioning of snap points along the x axis of the scroll container it is applied to.</p>\n"
    },
    {
      "name": "scroll-snap-points-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the positioning of snap points along the y axis of the scroll container it is applied to.</p>\n"
    },
    {
      "name": "scroll-snap-coordinate",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container’s snap-destination for the respective axis.</p>\n"
    },
    {
      "name": "scroll-snap-destination",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Define the x and y coordinate within the scroll container’s visual viewport which element snap points will align with.</p>\n"
    },
    {
      "name": "viewport-fit",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation.</p>\n"
    },
    {
      "name": "border-block-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-block-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-inline-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-inline-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-inline-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "border": 1
      },
      "docs": "<p>The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element&#39;s writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "overflow-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "layout": 1
      },
      "docs": "<p>The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis.</p>\n"
    },
    {
      "name": "additive-symbols",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/additive-symbols)"
      },
      "docs": ""
    },
    {
      "name": "alt",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.</p>\n"
    },
    {
      "name": "behavior",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>IE only. Used to extend behaviors of the browser.</p>\n"
    },
    {
      "name": "box-decoration-break",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.</p>\n"
    },
    {
      "name": "fallback",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies a fallback counter style to be used when the current counter style can’t create a representation for a given counter value.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/fallback)"
      },
      "docs": ""
    },
    {
      "name": "font-language-override",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>The value of &#39;normal&#39; implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.</p>\n"
    },
    {
      "name": "font-synthesis",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.</p>\n"
    },
    {
      "name": "font-variant-alternates",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.</p>\n"
    },
    {
      "name": "font-variant-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "font": 1
      },
      "docs": "<p>Specifies the vertical position</p>\n"
    },
    {
      "name": "ime-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Controls the state of the input method editor for text fields.</p>\n"
    },
    {
      "name": "mask-image",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Sets the mask layer image of an element.</p>\n"
    },
    {
      "name": "mask-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Indicates whether the mask layer image is treated as luminance mask or alpha mask.</p>\n"
    },
    {
      "name": "mask-origin",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the mask positioning area.</p>\n"
    },
    {
      "name": "mask-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how mask layer images are positioned.</p>\n"
    },
    {
      "name": "mask-repeat",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how mask layer images are tiled after they have been sized and positioned.</p>\n"
    },
    {
      "name": "mask-size",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies the size of the mask layer images.</p>\n"
    },
    {
      "name": "nav-down",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides an way to control directional focus navigation.</p>\n"
    },
    {
      "name": "nav-index",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides an input-method-neutral way of specifying the sequential navigation order (also known as &#39;tabbing order&#39;).</p>\n"
    },
    {
      "name": "nav-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides an way to control directional focus navigation.</p>\n"
    },
    {
      "name": "nav-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides an way to control directional focus navigation.</p>\n"
    },
    {
      "name": "nav-up",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Provides an way to control directional focus navigation.</p>\n"
    },
    {
      "name": "negative",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Defines how to alter the representation when the counter value is negative.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/negative)"
      },
      "docs": ""
    },
    {
      "name": "offset-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;bottom&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "offset-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;top&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "offset-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;right&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "offset-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Logical &#39;left&#39;. Mapping depends on the parent element’s &#39;writing-mode&#39;, &#39;direction&#39;, and &#39;text-orientation&#39;.</p>\n"
    },
    {
      "name": "pad",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies a “fixed-width” counter style, where representations shorter than the pad value are padded with a particular <symbol>\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/pad)"
      },
      "docs": ""
    },
    {
      "name": "prefix",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies a <symbol> that is prepended to the marker representation.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/prefix)"
      },
      "docs": ""
    },
    {
      "name": "range",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Defines the ranges over which the counter style is defined.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/range)"
      },
      "docs": ""
    },
    {
      "name": "ruby-align",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.</p>\n"
    },
    {
      "name": "ruby-overhang",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.</p>\n"
    },
    {
      "name": "ruby-span",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.</p>\n"
    },
    {
      "name": "scrollbar-3dlight-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.</p>\n"
    },
    {
      "name": "scrollbar-arrow-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the arrow elements of a scroll arrow.</p>\n"
    },
    {
      "name": "scrollbar-base-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.</p>\n"
    },
    {
      "name": "scrollbar-darkshadow-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "shadow": 1
      },
      "docs": "<p>Determines the color of the gutter of a scroll bar.</p>\n"
    },
    {
      "name": "scrollbar-face-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the scroll box and scroll arrows of a scroll bar.</p>\n"
    },
    {
      "name": "scrollbar-highlight-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.</p>\n"
    },
    {
      "name": "scrollbar-shadow-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "shadow": 1
      },
      "docs": "<p>Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.</p>\n"
    },
    {
      "name": "scrollbar-track-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>Determines the color of the track element of a scroll bar.</p>\n"
    },
    {
      "name": "suffix",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies a <symbol> that is appended to the marker representation.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/suffix)"
      },
      "docs": ""
    },
    {
      "name": "system",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies which algorithm will be used to construct the counter’s representation based on the counter value.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/system)"
      },
      "docs": ""
    },
    {
      "name": "symbols",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "counter-style": "descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/symbols)"
      },
      "docs": ""
    },
    {
      "name": "aspect-ratio",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions.</p>\n"
    },
    {
      "name": "azimuth",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.</p>\n"
    },
    {
      "name": "border-end-end-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "radius": 1,
        "border": 1
      },
      "docs": "<p>The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-end-start-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "radius": 1,
        "border": 1
      },
      "docs": "<p>The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-start-end-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "radius": 1,
        "border": 1
      },
      "docs": "<p>The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "border-start-start-radius",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "radius": 1,
        "border": 1
      },
      "docs": "<p>The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element&#39;s writing-mode, direction, and text-orientation.</p>\n"
    },
    {
      "name": "box-ordinal-group",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The box-ordinal-group CSS property assigns the flexbox&#39;s child elements to an ordinal group.</p>\n"
    },
    {
      "name": "color-adjust",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The color-adjust property is a non-standard CSS extension that can be used to force printing of background colors and images in browsers based on the WebKit engine.</p>\n"
    },
    {
      "name": "counter-set",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn&#39;t already a counter of the given name on the element.</p>\n"
    },
    {
      "name": "hanging-punctuation",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.</p>\n"
    },
    {
      "name": "initial-letter",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters.</p>\n"
    },
    {
      "name": "initial-letter-align",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph.</p>\n"
    },
    {
      "name": "line-clamp",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content.</p>\n"
    },
    {
      "name": "line-height-step",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid.</p>\n"
    },
    {
      "name": "margin-trim",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "margin": 1
      },
      "docs": "<p>The margin-trim property allows the container to trim the margins of its children where they adjoin the container’s edges.</p>\n"
    },
    {
      "name": "mask-border",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border CSS property lets you create a mask along the edge of an element&#39;s border.</p>\n<p>This property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value.</p>\n"
    },
    {
      "name": "mask-border-mode",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-mode CSS property specifies the blending mode used in a mask border.</p>\n"
    },
    {
      "name": "mask-border-outset",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-outset CSS property specifies the distance by which an element&#39;s mask border is set out from its border box.</p>\n"
    },
    {
      "name": "mask-border-repeat",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element&#39;s mask border.</p>\n"
    },
    {
      "name": "mask-border-slice",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element&#39;s mask border.</p>\n"
    },
    {
      "name": "mask-border-source",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-source CSS property specifies the source image used to create an element&#39;s mask border.</p>\n<p>The mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border.</p>\n"
    },
    {
      "name": "mask-border-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-border-width CSS property specifies the width of an element&#39;s mask border.</p>\n"
    },
    {
      "name": "mask-clip",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area.</p>\n"
    },
    {
      "name": "mask-composite",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it.</p>\n"
    },
    {
      "name": "max-lines",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The max-liens property forces a break after a set number of lines</p>\n"
    },
    {
      "name": "overflow-clip-box",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "layout": 1
      },
      "docs": "<p>The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties.</p>\n"
    },
    {
      "name": "overflow-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "layout": 1
      },
      "docs": "<p>The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis.</p>\n"
    },
    {
      "name": "overscroll-behavior",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser&#39;s scroll overflow behavior — what happens when the boundary of a scrolling area is reached.</p>\n"
    },
    {
      "name": "overscroll-behavior-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The overscroll-behavior-x CSS property is allows you to control the browser&#39;s scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the x axis direction.</p>\n"
    },
    {
      "name": "overscroll-behavior-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The overscroll-behavior-y CSS property is allows you to control the browser&#39;s scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the y axis direction.</p>\n"
    },
    {
      "name": "ruby-merge",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available.</p>\n"
    },
    {
      "name": "scrollbar-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scrollbar-color CSS property sets the color of the scrollbar track and thumb.</p>\n"
    },
    {
      "name": "scrollbar-width",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scrollbar-width property allows the author to set the maximum thickness of an element’s scrollbars when they are shown.</p>\n"
    },
    {
      "name": "scroll-margin",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands.</p>\n"
    },
    {
      "name": "scroll-margin-block",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension.</p>\n"
    },
    {
      "name": "scroll-margin-block-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-block-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-bottom",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-inline",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension.</p>\n"
    },
    {
      "name": "scroll-margin-inline-start",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-inline-end",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-left",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-right",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-margin-top",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets.</p>\n"
    },
    {
      "name": "scroll-snap-type-x",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.</p>\n<p>Specifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.</p>\n"
    },
    {
      "name": "scroll-snap-type-y",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.</p>\n<p>Specifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent.</p>\n"
    },
    {
      "name": "text-decoration-thickness",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tdt",
        "text": 1
      },
      "docs": "<p>The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline.</p>\n",
      "alias": "tdt"
    },
    {
      "name": "text-emphasis",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "te",
        "text": 1
      },
      "docs": "<p>The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element&#39;s text, except separator characters, like spaces,  and control characters.</p>\n",
      "alias": "te"
    },
    {
      "name": "text-emphasis-color",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tec",
        "text": 1
      },
      "docs": "<p>The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand.</p>\n",
      "alias": "tec"
    },
    {
      "name": "text-emphasis-position",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tep",
        "text": 1
      },
      "docs": "<p>The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn&#39;t enough place, the line height is increased.</p>\n",
      "alias": "tep"
    },
    {
      "name": "text-emphasis-style",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "alias": "tes",
        "text": 1
      },
      "docs": "<p>The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand.</p>\n",
      "alias": "tes"
    },
    {
      "name": "text-underline-offset",
      "meta": {},
      "kind": "styleprop",
      "tags": {
        "text": 1
      },
      "docs": "<p>The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position.</p>\n"
    },
    {
      "name": "speak-as",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue.</p>\n"
    },
    {
      "name": "bleed",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property.</p>\n"
    },
    {
      "name": "marks",
      "meta": {},
      "kind": "styleprop",
      "tags": {},
      "docs": "<p>The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets.</p>\n"
    },
    {
      "name": "@odd",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": ":nth-child(odd)",
        "pseudoclass": 1
      },
      "docs": "<p>Represents elements whose numeric position in a series of siblings is odd 1, 3, 5, etc</p>\n"
    },
    {
      "name": "@even",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": ":nth-child(even)",
        "pseudoclass": 1
      },
      "docs": "<p>Represents elements whose numeric position in a series of siblings is even 2, 4, 6, etc</p>\n"
    },
    {
      "name": "@first",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": ":first-child",
        "pseudoclass": 1
      },
      "docs": "<p>represents the first element among a group of sibling elements</p>\n"
    },
    {
      "name": "@last",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": ":last-child",
        "pseudoclass": 1
      },
      "docs": "<p>represents the last element among a group of sibling elements</p>\n"
    },
    {
      "name": "@only",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": ":only-child",
        "pseudoclass": 1
      },
      "docs": "<p>represents an element without any siblings</p>\n"
    },
    {
      "name": "@hover",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": "<p>Generally triggered when the user hovers over an element with the cursor (mouse pointer)</p>\n"
    },
    {
      "name": "@active",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": "<p>Element is being activated by the user. When using a mouse, &quot;activation&quot; typically starts when the user presses down the primary mouse button.</p>\n"
    },
    {
      "name": "@visited",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": ""
    },
    {
      "name": "@link",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": ""
    },
    {
      "name": "@enabled",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": ""
    },
    {
      "name": "@checked",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": ""
    },
    {
      "name": "@focus",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoclass": 1
      },
      "docs": "<p>element has focus</p>\n"
    },
    {
      "name": "@focin",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": "<p>element OR descendant of element has focus</p>\n"
    },
    {
      "name": "@xs",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(min-width: 480px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@sm",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(min-width: 640px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@md",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(min-width: 768px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lg",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(min-width: 1024px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@xl",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(min-width: 1280px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lt-xs",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(max-width: 479px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lt-sm",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(max-width: 639px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lt-md",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(max-width: 767px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lt-lg",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(max-width: 1023px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@lt-xl",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(max-width: 1279px)",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@dark",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(prefers-color-scheme: dark)",
        "media": 1
      },
      "docs": "<p>Indicates that user has notified that they prefer an interface that has a dark theme.</p>\n"
    },
    {
      "name": "@light",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(prefers-color-scheme: light)",
        "media": 1
      },
      "docs": "<p>Indicates that user has notified that they prefer an interface that has a light theme, or has not expressed an active preference.</p>\n"
    },
    {
      "name": "@touch",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@suspended",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@move",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@hold",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@ssr",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@landscape",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(orientation: landscape)\nThe viewport is in a landscape orientation, i.e., the width is greater than the height.",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@portrait",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(orientation: portrait)\nThe viewport is in a portrait orientation, i.e.,  the height is greater than or equal to the width.",
        "breakpoint": 1,
        "media": 1
      },
      "docs": ""
    },
    {
      "name": "@print",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(media: print)",
        "media": 1
      },
      "docs": "<p>Intended for paged material and documents viewed on a screen in print preview mode.</p>\n"
    },
    {
      "name": "@screen",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "(media: screen)",
        "media": 1
      },
      "docs": "<p>Intended primarily for screens.</p>\n"
    },
    {
      "name": "@before",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "detail": "::before { ... }",
        "pseudoelement": 1
      },
      "docs": "<p>Pseudo-element that is the first child of the selected element</p>\n"
    },
    {
      "name": "@after",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "pseudoelement": 1,
        "detail": "::after { ... }"
      },
      "docs": "<p>Pseudo-element that is the last child of the selected element</p>\n"
    },
    {
      "name": "@in",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "see": "",
        "detail": "Style when element is transitioning into the dom",
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@out",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "see": "",
        "detail": "Style when element is transitioning out of the dom",
        "custom": 1
      },
      "docs": ""
    },
    {
      "name": "@off",
      "meta": {},
      "kind": "stylemod",
      "tags": {
        "see": "",
        "detail": "Style when element is removed",
        "custom": 1
      },
      "docs": ""
    }
  ]
}